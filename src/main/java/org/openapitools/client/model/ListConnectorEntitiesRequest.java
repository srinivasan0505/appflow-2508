/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListConnectorEntitiesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class ListConnectorEntitiesRequest {
  public static final String SERIALIZED_NAME_CONNECTOR_PROFILE_NAME = "connectorProfileName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROFILE_NAME)
  @javax.annotation.Nullable
  private String connectorProfileName;

  /**
   *  The type of connector, such as Salesforce, Amplitude, and so on. 
   */
  @JsonAdapter(ConnectorTypeEnum.Adapter.class)
  public enum ConnectorTypeEnum {
    SALESFORCE("Salesforce"),
    
    SINGULAR("Singular"),
    
    SLACK("Slack"),
    
    REDSHIFT("Redshift"),
    
    S3("S3"),
    
    MARKETO("Marketo"),
    
    GOOGLEANALYTICS("Googleanalytics"),
    
    ZENDESK("Zendesk"),
    
    SERVICENOW("Servicenow"),
    
    DATADOG("Datadog"),
    
    TRENDMICRO("Trendmicro"),
    
    SNOWFLAKE("Snowflake"),
    
    DYNATRACE("Dynatrace"),
    
    INFORNEXUS("Infornexus"),
    
    AMPLITUDE("Amplitude"),
    
    VEEVA("Veeva"),
    
    EVENT_BRIDGE("EventBridge"),
    
    LOOKOUT_METRICS("LookoutMetrics"),
    
    UPSOLVER("Upsolver"),
    
    HONEYCODE("Honeycode"),
    
    CUSTOMER_PROFILES("CustomerProfiles"),
    
    SAPO_DATA("SAPOData"),
    
    CUSTOM_CONNECTOR("CustomConnector"),
    
    PARDOT("Pardot");

    private String value;

    ConnectorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectorTypeEnum fromValue(String value) {
      for (ConnectorTypeEnum b : ConnectorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  @javax.annotation.Nullable
  private ConnectorTypeEnum connectorType;

  public static final String SERIALIZED_NAME_ENTITIES_PATH = "entitiesPath";
  @SerializedName(SERIALIZED_NAME_ENTITIES_PATH)
  @javax.annotation.Nullable
  private String entitiesPath;

  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  @javax.annotation.Nullable
  private String apiVersion;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  @javax.annotation.Nullable
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  @javax.annotation.Nullable
  private String nextToken;

  public ListConnectorEntitiesRequest() {
  }

  public ListConnectorEntitiesRequest connectorProfileName(@javax.annotation.Nullable String connectorProfileName) {
    this.connectorProfileName = connectorProfileName;
    return this;
  }

  /**
   *  The name of the connector profile. The name is unique for each &lt;code&gt;ConnectorProfile&lt;/code&gt; in the Amazon Web Services account, and is used to query the downstream connector. 
   * @return connectorProfileName
   */
  @javax.annotation.Nullable
  public String getConnectorProfileName() {
    return connectorProfileName;
  }

  public void setConnectorProfileName(@javax.annotation.Nullable String connectorProfileName) {
    this.connectorProfileName = connectorProfileName;
  }


  public ListConnectorEntitiesRequest connectorType(@javax.annotation.Nullable ConnectorTypeEnum connectorType) {
    this.connectorType = connectorType;
    return this;
  }

  /**
   *  The type of connector, such as Salesforce, Amplitude, and so on. 
   * @return connectorType
   */
  @javax.annotation.Nullable
  public ConnectorTypeEnum getConnectorType() {
    return connectorType;
  }

  public void setConnectorType(@javax.annotation.Nullable ConnectorTypeEnum connectorType) {
    this.connectorType = connectorType;
  }


  public ListConnectorEntitiesRequest entitiesPath(@javax.annotation.Nullable String entitiesPath) {
    this.entitiesPath = entitiesPath;
    return this;
  }

  /**
   *  This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the &lt;code&gt;entitiesPath&lt;/code&gt; parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. 
   * @return entitiesPath
   */
  @javax.annotation.Nullable
  public String getEntitiesPath() {
    return entitiesPath;
  }

  public void setEntitiesPath(@javax.annotation.Nullable String entitiesPath) {
    this.entitiesPath = entitiesPath;
  }


  public ListConnectorEntitiesRequest apiVersion(@javax.annotation.Nullable String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * The version of the API that&#39;s used by the connector.
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(@javax.annotation.Nullable String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public ListConnectorEntitiesRequest maxResults(@javax.annotation.Nullable Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of items that the operation returns in the response.
   * minimum: 1
   * maximum: 10000
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(@javax.annotation.Nullable Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListConnectorEntitiesRequest nextToken(@javax.annotation.Nullable String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * A token that was provided by your prior &lt;code&gt;ListConnectorEntities&lt;/code&gt; operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(@javax.annotation.Nullable String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListConnectorEntitiesRequest listConnectorEntitiesRequest = (ListConnectorEntitiesRequest) o;
    return Objects.equals(this.connectorProfileName, listConnectorEntitiesRequest.connectorProfileName) &&
        Objects.equals(this.connectorType, listConnectorEntitiesRequest.connectorType) &&
        Objects.equals(this.entitiesPath, listConnectorEntitiesRequest.entitiesPath) &&
        Objects.equals(this.apiVersion, listConnectorEntitiesRequest.apiVersion) &&
        Objects.equals(this.maxResults, listConnectorEntitiesRequest.maxResults) &&
        Objects.equals(this.nextToken, listConnectorEntitiesRequest.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorProfileName, connectorType, entitiesPath, apiVersion, maxResults, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListConnectorEntitiesRequest {\n");
    sb.append("    connectorProfileName: ").append(toIndentedString(connectorProfileName)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    entitiesPath: ").append(toIndentedString(entitiesPath)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorProfileName");
    openapiFields.add("connectorType");
    openapiFields.add("entitiesPath");
    openapiFields.add("apiVersion");
    openapiFields.add("maxResults");
    openapiFields.add("nextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListConnectorEntitiesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListConnectorEntitiesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListConnectorEntitiesRequest is not found in the empty JSON string", ListConnectorEntitiesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListConnectorEntitiesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListConnectorEntitiesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectorProfileName") != null && !jsonObj.get("connectorProfileName").isJsonNull()) && !jsonObj.get("connectorProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorProfileName").toString()));
      }
      if ((jsonObj.get("connectorType") != null && !jsonObj.get("connectorType").isJsonNull()) && !jsonObj.get("connectorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorType").toString()));
      }
      // validate the optional field `connectorType`
      if (jsonObj.get("connectorType") != null && !jsonObj.get("connectorType").isJsonNull()) {
        ConnectorTypeEnum.validateJsonElement(jsonObj.get("connectorType"));
      }
      if ((jsonObj.get("entitiesPath") != null && !jsonObj.get("entitiesPath").isJsonNull()) && !jsonObj.get("entitiesPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entitiesPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entitiesPath").toString()));
      }
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListConnectorEntitiesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListConnectorEntitiesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListConnectorEntitiesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListConnectorEntitiesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListConnectorEntitiesRequest>() {
           @Override
           public void write(JsonWriter out, ListConnectorEntitiesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListConnectorEntitiesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListConnectorEntitiesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListConnectorEntitiesRequest
   * @throws IOException if the JSON string is invalid with respect to ListConnectorEntitiesRequest
   */
  public static ListConnectorEntitiesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListConnectorEntitiesRequest.class);
  }

  /**
   * Convert an instance of ListConnectorEntitiesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

