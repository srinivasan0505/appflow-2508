/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ConnectionMode;
import org.openapitools.client.model.ConnectorProfilePrivateConnectionProvisioningState;
import org.openapitools.client.model.ConnectorType;
import org.openapitools.client.model.CreateConnectorProfileRequestConnectorProfileConfigConnectorProfileProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Describes an instance of a connector. This includes the provided name, credentials ARN, connection-mode, and so on. To keep the API intuitive and extensible, the fields that are common to all types of connector profiles are explicitly specified at the top level. The rest of the connector-specific properties are available via the &lt;code&gt;connectorProfileProperties&lt;/code&gt; field. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class ConnectorProfile {
  public static final String SERIALIZED_NAME_CONNECTOR_PROFILE_ARN = "connectorProfileArn";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROFILE_ARN)
  @javax.annotation.Nullable
  private String connectorProfileArn;

  public static final String SERIALIZED_NAME_CONNECTOR_PROFILE_NAME = "connectorProfileName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROFILE_NAME)
  @javax.annotation.Nullable
  private String connectorProfileName;

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  @javax.annotation.Nullable
  private ConnectorType connectorType;

  public static final String SERIALIZED_NAME_CONNECTOR_LABEL = "connectorLabel";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_LABEL)
  @javax.annotation.Nullable
  private String connectorLabel;

  public static final String SERIALIZED_NAME_CONNECTION_MODE = "connectionMode";
  @SerializedName(SERIALIZED_NAME_CONNECTION_MODE)
  @javax.annotation.Nullable
  private ConnectionMode connectionMode;

  public static final String SERIALIZED_NAME_CREDENTIALS_ARN = "credentialsArn";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_ARN)
  @javax.annotation.Nullable
  private String credentialsArn;

  public static final String SERIALIZED_NAME_CONNECTOR_PROFILE_PROPERTIES = "connectorProfileProperties";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROFILE_PROPERTIES)
  @javax.annotation.Nullable
  private CreateConnectorProfileRequestConnectorProfileConfigConnectorProfileProperties connectorProfileProperties;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "lastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_PRIVATE_CONNECTION_PROVISIONING_STATE = "privateConnectionProvisioningState";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CONNECTION_PROVISIONING_STATE)
  @javax.annotation.Nullable
  private ConnectorProfilePrivateConnectionProvisioningState privateConnectionProvisioningState;

  public ConnectorProfile() {
  }

  public ConnectorProfile connectorProfileArn(@javax.annotation.Nullable String connectorProfileArn) {
    this.connectorProfileArn = connectorProfileArn;
    return this;
  }

  /**
   * Get connectorProfileArn
   * @return connectorProfileArn
   */
  @javax.annotation.Nullable
  public String getConnectorProfileArn() {
    return connectorProfileArn;
  }

  public void setConnectorProfileArn(@javax.annotation.Nullable String connectorProfileArn) {
    this.connectorProfileArn = connectorProfileArn;
  }


  public ConnectorProfile connectorProfileName(@javax.annotation.Nullable String connectorProfileName) {
    this.connectorProfileName = connectorProfileName;
    return this;
  }

  /**
   * Get connectorProfileName
   * @return connectorProfileName
   */
  @javax.annotation.Nullable
  public String getConnectorProfileName() {
    return connectorProfileName;
  }

  public void setConnectorProfileName(@javax.annotation.Nullable String connectorProfileName) {
    this.connectorProfileName = connectorProfileName;
  }


  public ConnectorProfile connectorType(@javax.annotation.Nullable ConnectorType connectorType) {
    this.connectorType = connectorType;
    return this;
  }

  /**
   * Get connectorType
   * @return connectorType
   */
  @javax.annotation.Nullable
  public ConnectorType getConnectorType() {
    return connectorType;
  }

  public void setConnectorType(@javax.annotation.Nullable ConnectorType connectorType) {
    this.connectorType = connectorType;
  }


  public ConnectorProfile connectorLabel(@javax.annotation.Nullable String connectorLabel) {
    this.connectorLabel = connectorLabel;
    return this;
  }

  /**
   * Get connectorLabel
   * @return connectorLabel
   */
  @javax.annotation.Nullable
  public String getConnectorLabel() {
    return connectorLabel;
  }

  public void setConnectorLabel(@javax.annotation.Nullable String connectorLabel) {
    this.connectorLabel = connectorLabel;
  }


  public ConnectorProfile connectionMode(@javax.annotation.Nullable ConnectionMode connectionMode) {
    this.connectionMode = connectionMode;
    return this;
  }

  /**
   * Get connectionMode
   * @return connectionMode
   */
  @javax.annotation.Nullable
  public ConnectionMode getConnectionMode() {
    return connectionMode;
  }

  public void setConnectionMode(@javax.annotation.Nullable ConnectionMode connectionMode) {
    this.connectionMode = connectionMode;
  }


  public ConnectorProfile credentialsArn(@javax.annotation.Nullable String credentialsArn) {
    this.credentialsArn = credentialsArn;
    return this;
  }

  /**
   * Get credentialsArn
   * @return credentialsArn
   */
  @javax.annotation.Nullable
  public String getCredentialsArn() {
    return credentialsArn;
  }

  public void setCredentialsArn(@javax.annotation.Nullable String credentialsArn) {
    this.credentialsArn = credentialsArn;
  }


  public ConnectorProfile connectorProfileProperties(@javax.annotation.Nullable CreateConnectorProfileRequestConnectorProfileConfigConnectorProfileProperties connectorProfileProperties) {
    this.connectorProfileProperties = connectorProfileProperties;
    return this;
  }

  /**
   * Get connectorProfileProperties
   * @return connectorProfileProperties
   */
  @javax.annotation.Nullable
  public CreateConnectorProfileRequestConnectorProfileConfigConnectorProfileProperties getConnectorProfileProperties() {
    return connectorProfileProperties;
  }

  public void setConnectorProfileProperties(@javax.annotation.Nullable CreateConnectorProfileRequestConnectorProfileConfigConnectorProfileProperties connectorProfileProperties) {
    this.connectorProfileProperties = connectorProfileProperties;
  }


  public ConnectorProfile createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ConnectorProfile lastUpdatedAt(@javax.annotation.Nullable OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(@javax.annotation.Nullable OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public ConnectorProfile privateConnectionProvisioningState(@javax.annotation.Nullable ConnectorProfilePrivateConnectionProvisioningState privateConnectionProvisioningState) {
    this.privateConnectionProvisioningState = privateConnectionProvisioningState;
    return this;
  }

  /**
   * Get privateConnectionProvisioningState
   * @return privateConnectionProvisioningState
   */
  @javax.annotation.Nullable
  public ConnectorProfilePrivateConnectionProvisioningState getPrivateConnectionProvisioningState() {
    return privateConnectionProvisioningState;
  }

  public void setPrivateConnectionProvisioningState(@javax.annotation.Nullable ConnectorProfilePrivateConnectionProvisioningState privateConnectionProvisioningState) {
    this.privateConnectionProvisioningState = privateConnectionProvisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorProfile connectorProfile = (ConnectorProfile) o;
    return Objects.equals(this.connectorProfileArn, connectorProfile.connectorProfileArn) &&
        Objects.equals(this.connectorProfileName, connectorProfile.connectorProfileName) &&
        Objects.equals(this.connectorType, connectorProfile.connectorType) &&
        Objects.equals(this.connectorLabel, connectorProfile.connectorLabel) &&
        Objects.equals(this.connectionMode, connectorProfile.connectionMode) &&
        Objects.equals(this.credentialsArn, connectorProfile.credentialsArn) &&
        Objects.equals(this.connectorProfileProperties, connectorProfile.connectorProfileProperties) &&
        Objects.equals(this.createdAt, connectorProfile.createdAt) &&
        Objects.equals(this.lastUpdatedAt, connectorProfile.lastUpdatedAt) &&
        Objects.equals(this.privateConnectionProvisioningState, connectorProfile.privateConnectionProvisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorProfileArn, connectorProfileName, connectorType, connectorLabel, connectionMode, credentialsArn, connectorProfileProperties, createdAt, lastUpdatedAt, privateConnectionProvisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorProfile {\n");
    sb.append("    connectorProfileArn: ").append(toIndentedString(connectorProfileArn)).append("\n");
    sb.append("    connectorProfileName: ").append(toIndentedString(connectorProfileName)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    connectorLabel: ").append(toIndentedString(connectorLabel)).append("\n");
    sb.append("    connectionMode: ").append(toIndentedString(connectionMode)).append("\n");
    sb.append("    credentialsArn: ").append(toIndentedString(credentialsArn)).append("\n");
    sb.append("    connectorProfileProperties: ").append(toIndentedString(connectorProfileProperties)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    privateConnectionProvisioningState: ").append(toIndentedString(privateConnectionProvisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorProfileArn");
    openapiFields.add("connectorProfileName");
    openapiFields.add("connectorType");
    openapiFields.add("connectorLabel");
    openapiFields.add("connectionMode");
    openapiFields.add("credentialsArn");
    openapiFields.add("connectorProfileProperties");
    openapiFields.add("createdAt");
    openapiFields.add("lastUpdatedAt");
    openapiFields.add("privateConnectionProvisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorProfile is not found in the empty JSON string", ConnectorProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connectorProfileArn`
      if (jsonObj.get("connectorProfileArn") != null && !jsonObj.get("connectorProfileArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorProfileArn"));
      }
      // validate the optional field `connectorProfileName`
      if (jsonObj.get("connectorProfileName") != null && !jsonObj.get("connectorProfileName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorProfileName"));
      }
      // validate the optional field `connectorType`
      if (jsonObj.get("connectorType") != null && !jsonObj.get("connectorType").isJsonNull()) {
        ConnectorType.validateJsonElement(jsonObj.get("connectorType"));
      }
      // validate the optional field `connectorLabel`
      if (jsonObj.get("connectorLabel") != null && !jsonObj.get("connectorLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorLabel"));
      }
      // validate the optional field `connectionMode`
      if (jsonObj.get("connectionMode") != null && !jsonObj.get("connectionMode").isJsonNull()) {
        ConnectionMode.validateJsonElement(jsonObj.get("connectionMode"));
      }
      // validate the optional field `credentialsArn`
      if (jsonObj.get("credentialsArn") != null && !jsonObj.get("credentialsArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("credentialsArn"));
      }
      // validate the optional field `connectorProfileProperties`
      if (jsonObj.get("connectorProfileProperties") != null && !jsonObj.get("connectorProfileProperties").isJsonNull()) {
        CreateConnectorProfileRequestConnectorProfileConfigConnectorProfileProperties.validateJsonElement(jsonObj.get("connectorProfileProperties"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `lastUpdatedAt`
      if (jsonObj.get("lastUpdatedAt") != null && !jsonObj.get("lastUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedAt"));
      }
      // validate the optional field `privateConnectionProvisioningState`
      if (jsonObj.get("privateConnectionProvisioningState") != null && !jsonObj.get("privateConnectionProvisioningState").isJsonNull()) {
        ConnectorProfilePrivateConnectionProvisioningState.validateJsonElement(jsonObj.get("privateConnectionProvisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorProfile>() {
           @Override
           public void write(JsonWriter out, ConnectorProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorProfile
   * @throws IOException if the JSON string is invalid with respect to ConnectorProfile
   */
  public static ConnectorProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorProfile.class);
  }

  /**
   * Convert an instance of ConnectorProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

