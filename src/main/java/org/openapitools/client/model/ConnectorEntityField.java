/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ConnectorEntityFieldDestinationProperties;
import org.openapitools.client.model.ConnectorEntityFieldSourceProperties;
import org.openapitools.client.model.ConnectorEntityFieldSupportedFieldTypeDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Describes the data model of a connector field. For example, for an &lt;i&gt;account&lt;/i&gt; entity, the fields would be &lt;i&gt;account name&lt;/i&gt;, &lt;i&gt;account ID&lt;/i&gt;, and so on. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class ConnectorEntityField {
  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  @javax.annotation.Nonnull
  private String identifier;

  public static final String SERIALIZED_NAME_PARENT_IDENTIFIER = "parentIdentifier";
  @SerializedName(SERIALIZED_NAME_PARENT_IDENTIFIER)
  @javax.annotation.Nullable
  private String parentIdentifier;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_IS_PRIMARY_KEY = "isPrimaryKey";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY_KEY)
  @javax.annotation.Nullable
  private Boolean isPrimaryKey;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  @javax.annotation.Nullable
  private String defaultValue;

  public static final String SERIALIZED_NAME_IS_DEPRECATED = "isDeprecated";
  @SerializedName(SERIALIZED_NAME_IS_DEPRECATED)
  @javax.annotation.Nullable
  private Boolean isDeprecated;

  public static final String SERIALIZED_NAME_SUPPORTED_FIELD_TYPE_DETAILS = "supportedFieldTypeDetails";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_FIELD_TYPE_DETAILS)
  @javax.annotation.Nullable
  private ConnectorEntityFieldSupportedFieldTypeDetails supportedFieldTypeDetails;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_SOURCE_PROPERTIES = "sourceProperties";
  @SerializedName(SERIALIZED_NAME_SOURCE_PROPERTIES)
  @javax.annotation.Nullable
  private ConnectorEntityFieldSourceProperties sourceProperties;

  public static final String SERIALIZED_NAME_DESTINATION_PROPERTIES = "destinationProperties";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PROPERTIES)
  @javax.annotation.Nullable
  private ConnectorEntityFieldDestinationProperties destinationProperties;

  public static final String SERIALIZED_NAME_CUSTOM_PROPERTIES = "customProperties";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PROPERTIES)
  @javax.annotation.Nullable
  private Map customProperties;

  public ConnectorEntityField() {
  }

  public ConnectorEntityField identifier(@javax.annotation.Nonnull String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nonnull
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(@javax.annotation.Nonnull String identifier) {
    this.identifier = identifier;
  }


  public ConnectorEntityField parentIdentifier(@javax.annotation.Nullable String parentIdentifier) {
    this.parentIdentifier = parentIdentifier;
    return this;
  }

  /**
   * Get parentIdentifier
   * @return parentIdentifier
   */
  @javax.annotation.Nullable
  public String getParentIdentifier() {
    return parentIdentifier;
  }

  public void setParentIdentifier(@javax.annotation.Nullable String parentIdentifier) {
    this.parentIdentifier = parentIdentifier;
  }


  public ConnectorEntityField label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public ConnectorEntityField isPrimaryKey(@javax.annotation.Nullable Boolean isPrimaryKey) {
    this.isPrimaryKey = isPrimaryKey;
    return this;
  }

  /**
   * Get isPrimaryKey
   * @return isPrimaryKey
   */
  @javax.annotation.Nullable
  public Boolean getIsPrimaryKey() {
    return isPrimaryKey;
  }

  public void setIsPrimaryKey(@javax.annotation.Nullable Boolean isPrimaryKey) {
    this.isPrimaryKey = isPrimaryKey;
  }


  public ConnectorEntityField defaultValue(@javax.annotation.Nullable String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(@javax.annotation.Nullable String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public ConnectorEntityField isDeprecated(@javax.annotation.Nullable Boolean isDeprecated) {
    this.isDeprecated = isDeprecated;
    return this;
  }

  /**
   * Get isDeprecated
   * @return isDeprecated
   */
  @javax.annotation.Nullable
  public Boolean getIsDeprecated() {
    return isDeprecated;
  }

  public void setIsDeprecated(@javax.annotation.Nullable Boolean isDeprecated) {
    this.isDeprecated = isDeprecated;
  }


  public ConnectorEntityField supportedFieldTypeDetails(@javax.annotation.Nullable ConnectorEntityFieldSupportedFieldTypeDetails supportedFieldTypeDetails) {
    this.supportedFieldTypeDetails = supportedFieldTypeDetails;
    return this;
  }

  /**
   * Get supportedFieldTypeDetails
   * @return supportedFieldTypeDetails
   */
  @javax.annotation.Nullable
  public ConnectorEntityFieldSupportedFieldTypeDetails getSupportedFieldTypeDetails() {
    return supportedFieldTypeDetails;
  }

  public void setSupportedFieldTypeDetails(@javax.annotation.Nullable ConnectorEntityFieldSupportedFieldTypeDetails supportedFieldTypeDetails) {
    this.supportedFieldTypeDetails = supportedFieldTypeDetails;
  }


  public ConnectorEntityField description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public ConnectorEntityField sourceProperties(@javax.annotation.Nullable ConnectorEntityFieldSourceProperties sourceProperties) {
    this.sourceProperties = sourceProperties;
    return this;
  }

  /**
   * Get sourceProperties
   * @return sourceProperties
   */
  @javax.annotation.Nullable
  public ConnectorEntityFieldSourceProperties getSourceProperties() {
    return sourceProperties;
  }

  public void setSourceProperties(@javax.annotation.Nullable ConnectorEntityFieldSourceProperties sourceProperties) {
    this.sourceProperties = sourceProperties;
  }


  public ConnectorEntityField destinationProperties(@javax.annotation.Nullable ConnectorEntityFieldDestinationProperties destinationProperties) {
    this.destinationProperties = destinationProperties;
    return this;
  }

  /**
   * Get destinationProperties
   * @return destinationProperties
   */
  @javax.annotation.Nullable
  public ConnectorEntityFieldDestinationProperties getDestinationProperties() {
    return destinationProperties;
  }

  public void setDestinationProperties(@javax.annotation.Nullable ConnectorEntityFieldDestinationProperties destinationProperties) {
    this.destinationProperties = destinationProperties;
  }


  public ConnectorEntityField customProperties(@javax.annotation.Nullable Map customProperties) {
    this.customProperties = customProperties;
    return this;
  }

  /**
   * Get customProperties
   * @return customProperties
   */
  @javax.annotation.Nullable
  public Map getCustomProperties() {
    return customProperties;
  }

  public void setCustomProperties(@javax.annotation.Nullable Map customProperties) {
    this.customProperties = customProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorEntityField connectorEntityField = (ConnectorEntityField) o;
    return Objects.equals(this.identifier, connectorEntityField.identifier) &&
        Objects.equals(this.parentIdentifier, connectorEntityField.parentIdentifier) &&
        Objects.equals(this.label, connectorEntityField.label) &&
        Objects.equals(this.isPrimaryKey, connectorEntityField.isPrimaryKey) &&
        Objects.equals(this.defaultValue, connectorEntityField.defaultValue) &&
        Objects.equals(this.isDeprecated, connectorEntityField.isDeprecated) &&
        Objects.equals(this.supportedFieldTypeDetails, connectorEntityField.supportedFieldTypeDetails) &&
        Objects.equals(this.description, connectorEntityField.description) &&
        Objects.equals(this.sourceProperties, connectorEntityField.sourceProperties) &&
        Objects.equals(this.destinationProperties, connectorEntityField.destinationProperties) &&
        Objects.equals(this.customProperties, connectorEntityField.customProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, parentIdentifier, label, isPrimaryKey, defaultValue, isDeprecated, supportedFieldTypeDetails, description, sourceProperties, destinationProperties, customProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorEntityField {\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    parentIdentifier: ").append(toIndentedString(parentIdentifier)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    isPrimaryKey: ").append(toIndentedString(isPrimaryKey)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    isDeprecated: ").append(toIndentedString(isDeprecated)).append("\n");
    sb.append("    supportedFieldTypeDetails: ").append(toIndentedString(supportedFieldTypeDetails)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sourceProperties: ").append(toIndentedString(sourceProperties)).append("\n");
    sb.append("    destinationProperties: ").append(toIndentedString(destinationProperties)).append("\n");
    sb.append("    customProperties: ").append(toIndentedString(customProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identifier");
    openapiFields.add("parentIdentifier");
    openapiFields.add("label");
    openapiFields.add("isPrimaryKey");
    openapiFields.add("defaultValue");
    openapiFields.add("isDeprecated");
    openapiFields.add("supportedFieldTypeDetails");
    openapiFields.add("description");
    openapiFields.add("sourceProperties");
    openapiFields.add("destinationProperties");
    openapiFields.add("customProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorEntityField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorEntityField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorEntityField is not found in the empty JSON string", ConnectorEntityField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorEntityField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorEntityField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectorEntityField.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `identifier`
      String.validateJsonElement(jsonObj.get("identifier"));
      // validate the optional field `parentIdentifier`
      if (jsonObj.get("parentIdentifier") != null && !jsonObj.get("parentIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("parentIdentifier"));
      }
      // validate the optional field `label`
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("label"));
      }
      // validate the optional field `isPrimaryKey`
      if (jsonObj.get("isPrimaryKey") != null && !jsonObj.get("isPrimaryKey").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isPrimaryKey"));
      }
      // validate the optional field `defaultValue`
      if (jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultValue"));
      }
      // validate the optional field `isDeprecated`
      if (jsonObj.get("isDeprecated") != null && !jsonObj.get("isDeprecated").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isDeprecated"));
      }
      // validate the optional field `supportedFieldTypeDetails`
      if (jsonObj.get("supportedFieldTypeDetails") != null && !jsonObj.get("supportedFieldTypeDetails").isJsonNull()) {
        ConnectorEntityFieldSupportedFieldTypeDetails.validateJsonElement(jsonObj.get("supportedFieldTypeDetails"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `sourceProperties`
      if (jsonObj.get("sourceProperties") != null && !jsonObj.get("sourceProperties").isJsonNull()) {
        ConnectorEntityFieldSourceProperties.validateJsonElement(jsonObj.get("sourceProperties"));
      }
      // validate the optional field `destinationProperties`
      if (jsonObj.get("destinationProperties") != null && !jsonObj.get("destinationProperties").isJsonNull()) {
        ConnectorEntityFieldDestinationProperties.validateJsonElement(jsonObj.get("destinationProperties"));
      }
      // validate the optional field `customProperties`
      if (jsonObj.get("customProperties") != null && !jsonObj.get("customProperties").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("customProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorEntityField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorEntityField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorEntityField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorEntityField.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorEntityField>() {
           @Override
           public void write(JsonWriter out, ConnectorEntityField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorEntityField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorEntityField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorEntityField
   * @throws IOException if the JSON string is invalid with respect to ConnectorEntityField
   */
  public static ConnectorEntityField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorEntityField.class);
  }

  /**
   * Convert an instance of ConnectorEntityField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

