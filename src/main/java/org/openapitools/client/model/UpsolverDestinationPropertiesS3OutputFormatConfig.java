/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AggregationConfig;
import org.openapitools.client.model.FileType;
import org.openapitools.client.model.PrefixConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpsolverDestinationPropertiesS3OutputFormatConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class UpsolverDestinationPropertiesS3OutputFormatConfig {
  public static final String SERIALIZED_NAME_FILE_TYPE = "fileType";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  @javax.annotation.Nullable
  private FileType fileType;

  public static final String SERIALIZED_NAME_PREFIX_CONFIG = "prefixConfig";
  @SerializedName(SERIALIZED_NAME_PREFIX_CONFIG)
  @javax.annotation.Nonnull
  private PrefixConfig prefixConfig;

  public static final String SERIALIZED_NAME_AGGREGATION_CONFIG = "aggregationConfig";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_CONFIG)
  @javax.annotation.Nullable
  private AggregationConfig aggregationConfig;

  public UpsolverDestinationPropertiesS3OutputFormatConfig() {
  }

  public UpsolverDestinationPropertiesS3OutputFormatConfig fileType(@javax.annotation.Nullable FileType fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * Get fileType
   * @return fileType
   */
  @javax.annotation.Nullable
  public FileType getFileType() {
    return fileType;
  }

  public void setFileType(@javax.annotation.Nullable FileType fileType) {
    this.fileType = fileType;
  }


  public UpsolverDestinationPropertiesS3OutputFormatConfig prefixConfig(@javax.annotation.Nonnull PrefixConfig prefixConfig) {
    this.prefixConfig = prefixConfig;
    return this;
  }

  /**
   * Get prefixConfig
   * @return prefixConfig
   */
  @javax.annotation.Nonnull
  public PrefixConfig getPrefixConfig() {
    return prefixConfig;
  }

  public void setPrefixConfig(@javax.annotation.Nonnull PrefixConfig prefixConfig) {
    this.prefixConfig = prefixConfig;
  }


  public UpsolverDestinationPropertiesS3OutputFormatConfig aggregationConfig(@javax.annotation.Nullable AggregationConfig aggregationConfig) {
    this.aggregationConfig = aggregationConfig;
    return this;
  }

  /**
   * Get aggregationConfig
   * @return aggregationConfig
   */
  @javax.annotation.Nullable
  public AggregationConfig getAggregationConfig() {
    return aggregationConfig;
  }

  public void setAggregationConfig(@javax.annotation.Nullable AggregationConfig aggregationConfig) {
    this.aggregationConfig = aggregationConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpsolverDestinationPropertiesS3OutputFormatConfig upsolverDestinationPropertiesS3OutputFormatConfig = (UpsolverDestinationPropertiesS3OutputFormatConfig) o;
    return Objects.equals(this.fileType, upsolverDestinationPropertiesS3OutputFormatConfig.fileType) &&
        Objects.equals(this.prefixConfig, upsolverDestinationPropertiesS3OutputFormatConfig.prefixConfig) &&
        Objects.equals(this.aggregationConfig, upsolverDestinationPropertiesS3OutputFormatConfig.aggregationConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileType, prefixConfig, aggregationConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpsolverDestinationPropertiesS3OutputFormatConfig {\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    prefixConfig: ").append(toIndentedString(prefixConfig)).append("\n");
    sb.append("    aggregationConfig: ").append(toIndentedString(aggregationConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileType");
    openapiFields.add("prefixConfig");
    openapiFields.add("aggregationConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("prefixConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpsolverDestinationPropertiesS3OutputFormatConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpsolverDestinationPropertiesS3OutputFormatConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpsolverDestinationPropertiesS3OutputFormatConfig is not found in the empty JSON string", UpsolverDestinationPropertiesS3OutputFormatConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpsolverDestinationPropertiesS3OutputFormatConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpsolverDestinationPropertiesS3OutputFormatConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpsolverDestinationPropertiesS3OutputFormatConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fileType`
      if (jsonObj.get("fileType") != null && !jsonObj.get("fileType").isJsonNull()) {
        FileType.validateJsonElement(jsonObj.get("fileType"));
      }
      // validate the required field `prefixConfig`
      PrefixConfig.validateJsonElement(jsonObj.get("prefixConfig"));
      // validate the optional field `aggregationConfig`
      if (jsonObj.get("aggregationConfig") != null && !jsonObj.get("aggregationConfig").isJsonNull()) {
        AggregationConfig.validateJsonElement(jsonObj.get("aggregationConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpsolverDestinationPropertiesS3OutputFormatConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpsolverDestinationPropertiesS3OutputFormatConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpsolverDestinationPropertiesS3OutputFormatConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpsolverDestinationPropertiesS3OutputFormatConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<UpsolverDestinationPropertiesS3OutputFormatConfig>() {
           @Override
           public void write(JsonWriter out, UpsolverDestinationPropertiesS3OutputFormatConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpsolverDestinationPropertiesS3OutputFormatConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpsolverDestinationPropertiesS3OutputFormatConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpsolverDestinationPropertiesS3OutputFormatConfig
   * @throws IOException if the JSON string is invalid with respect to UpsolverDestinationPropertiesS3OutputFormatConfig
   */
  public static UpsolverDestinationPropertiesS3OutputFormatConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpsolverDestinationPropertiesS3OutputFormatConfig.class);
  }

  /**
   * Convert an instance of UpsolverDestinationPropertiesS3OutputFormatConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

