/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinationConnectorPropertiesCustomConnector;
import org.openapitools.client.model.DestinationConnectorPropertiesCustomerProfiles;
import org.openapitools.client.model.DestinationConnectorPropertiesEventBridge;
import org.openapitools.client.model.DestinationConnectorPropertiesHoneycode;
import org.openapitools.client.model.DestinationConnectorPropertiesMarketo;
import org.openapitools.client.model.DestinationConnectorPropertiesRedshift;
import org.openapitools.client.model.DestinationConnectorPropertiesS3;
import org.openapitools.client.model.DestinationConnectorPropertiesSAPOData;
import org.openapitools.client.model.DestinationConnectorPropertiesSalesforce;
import org.openapitools.client.model.DestinationConnectorPropertiesSnowflake;
import org.openapitools.client.model.DestinationConnectorPropertiesUpsolver;
import org.openapitools.client.model.DestinationConnectorPropertiesZendesk;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  This stores the information that is required to query a particular connector. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class DestinationConnectorProperties {
  public static final String SERIALIZED_NAME_REDSHIFT = "Redshift";
  @SerializedName(SERIALIZED_NAME_REDSHIFT)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesRedshift redshift;

  public static final String SERIALIZED_NAME_S3 = "S3";
  @SerializedName(SERIALIZED_NAME_S3)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesS3 S3;

  public static final String SERIALIZED_NAME_SALESFORCE = "Salesforce";
  @SerializedName(SERIALIZED_NAME_SALESFORCE)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesSalesforce salesforce;

  public static final String SERIALIZED_NAME_SNOWFLAKE = "Snowflake";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesSnowflake snowflake;

  public static final String SERIALIZED_NAME_EVENT_BRIDGE = "EventBridge";
  @SerializedName(SERIALIZED_NAME_EVENT_BRIDGE)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesEventBridge eventBridge;

  public static final String SERIALIZED_NAME_LOOKOUT_METRICS = "LookoutMetrics";
  @SerializedName(SERIALIZED_NAME_LOOKOUT_METRICS)
  @javax.annotation.Nullable
  private Object lookoutMetrics;

  public static final String SERIALIZED_NAME_UPSOLVER = "Upsolver";
  @SerializedName(SERIALIZED_NAME_UPSOLVER)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesUpsolver upsolver;

  public static final String SERIALIZED_NAME_HONEYCODE = "Honeycode";
  @SerializedName(SERIALIZED_NAME_HONEYCODE)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesHoneycode honeycode;

  public static final String SERIALIZED_NAME_CUSTOMER_PROFILES = "CustomerProfiles";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PROFILES)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesCustomerProfiles customerProfiles;

  public static final String SERIALIZED_NAME_ZENDESK = "Zendesk";
  @SerializedName(SERIALIZED_NAME_ZENDESK)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesZendesk zendesk;

  public static final String SERIALIZED_NAME_MARKETO = "Marketo";
  @SerializedName(SERIALIZED_NAME_MARKETO)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesMarketo marketo;

  public static final String SERIALIZED_NAME_CUSTOM_CONNECTOR = "CustomConnector";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CONNECTOR)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesCustomConnector customConnector;

  public static final String SERIALIZED_NAME_SA_P_O_DATA = "SAPOData";
  @SerializedName(SERIALIZED_NAME_SA_P_O_DATA)
  @javax.annotation.Nullable
  private DestinationConnectorPropertiesSAPOData saPOData;

  public DestinationConnectorProperties() {
  }

  public DestinationConnectorProperties redshift(@javax.annotation.Nullable DestinationConnectorPropertiesRedshift redshift) {
    this.redshift = redshift;
    return this;
  }

  /**
   * Get redshift
   * @return redshift
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesRedshift getRedshift() {
    return redshift;
  }

  public void setRedshift(@javax.annotation.Nullable DestinationConnectorPropertiesRedshift redshift) {
    this.redshift = redshift;
  }


  public DestinationConnectorProperties S3(@javax.annotation.Nullable DestinationConnectorPropertiesS3 S3) {
    this.S3 = S3;
    return this;
  }

  /**
   * Get S3
   * @return S3
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesS3 getS3() {
    return S3;
  }

  public void setS3(@javax.annotation.Nullable DestinationConnectorPropertiesS3 S3) {
    this.S3 = S3;
  }


  public DestinationConnectorProperties salesforce(@javax.annotation.Nullable DestinationConnectorPropertiesSalesforce salesforce) {
    this.salesforce = salesforce;
    return this;
  }

  /**
   * Get salesforce
   * @return salesforce
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesSalesforce getSalesforce() {
    return salesforce;
  }

  public void setSalesforce(@javax.annotation.Nullable DestinationConnectorPropertiesSalesforce salesforce) {
    this.salesforce = salesforce;
  }


  public DestinationConnectorProperties snowflake(@javax.annotation.Nullable DestinationConnectorPropertiesSnowflake snowflake) {
    this.snowflake = snowflake;
    return this;
  }

  /**
   * Get snowflake
   * @return snowflake
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesSnowflake getSnowflake() {
    return snowflake;
  }

  public void setSnowflake(@javax.annotation.Nullable DestinationConnectorPropertiesSnowflake snowflake) {
    this.snowflake = snowflake;
  }


  public DestinationConnectorProperties eventBridge(@javax.annotation.Nullable DestinationConnectorPropertiesEventBridge eventBridge) {
    this.eventBridge = eventBridge;
    return this;
  }

  /**
   * Get eventBridge
   * @return eventBridge
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesEventBridge getEventBridge() {
    return eventBridge;
  }

  public void setEventBridge(@javax.annotation.Nullable DestinationConnectorPropertiesEventBridge eventBridge) {
    this.eventBridge = eventBridge;
  }


  public DestinationConnectorProperties lookoutMetrics(@javax.annotation.Nullable Object lookoutMetrics) {
    this.lookoutMetrics = lookoutMetrics;
    return this;
  }

  /**
   * Get lookoutMetrics
   * @return lookoutMetrics
   */
  @javax.annotation.Nullable
  public Object getLookoutMetrics() {
    return lookoutMetrics;
  }

  public void setLookoutMetrics(@javax.annotation.Nullable Object lookoutMetrics) {
    this.lookoutMetrics = lookoutMetrics;
  }


  public DestinationConnectorProperties upsolver(@javax.annotation.Nullable DestinationConnectorPropertiesUpsolver upsolver) {
    this.upsolver = upsolver;
    return this;
  }

  /**
   * Get upsolver
   * @return upsolver
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesUpsolver getUpsolver() {
    return upsolver;
  }

  public void setUpsolver(@javax.annotation.Nullable DestinationConnectorPropertiesUpsolver upsolver) {
    this.upsolver = upsolver;
  }


  public DestinationConnectorProperties honeycode(@javax.annotation.Nullable DestinationConnectorPropertiesHoneycode honeycode) {
    this.honeycode = honeycode;
    return this;
  }

  /**
   * Get honeycode
   * @return honeycode
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesHoneycode getHoneycode() {
    return honeycode;
  }

  public void setHoneycode(@javax.annotation.Nullable DestinationConnectorPropertiesHoneycode honeycode) {
    this.honeycode = honeycode;
  }


  public DestinationConnectorProperties customerProfiles(@javax.annotation.Nullable DestinationConnectorPropertiesCustomerProfiles customerProfiles) {
    this.customerProfiles = customerProfiles;
    return this;
  }

  /**
   * Get customerProfiles
   * @return customerProfiles
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesCustomerProfiles getCustomerProfiles() {
    return customerProfiles;
  }

  public void setCustomerProfiles(@javax.annotation.Nullable DestinationConnectorPropertiesCustomerProfiles customerProfiles) {
    this.customerProfiles = customerProfiles;
  }


  public DestinationConnectorProperties zendesk(@javax.annotation.Nullable DestinationConnectorPropertiesZendesk zendesk) {
    this.zendesk = zendesk;
    return this;
  }

  /**
   * Get zendesk
   * @return zendesk
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesZendesk getZendesk() {
    return zendesk;
  }

  public void setZendesk(@javax.annotation.Nullable DestinationConnectorPropertiesZendesk zendesk) {
    this.zendesk = zendesk;
  }


  public DestinationConnectorProperties marketo(@javax.annotation.Nullable DestinationConnectorPropertiesMarketo marketo) {
    this.marketo = marketo;
    return this;
  }

  /**
   * Get marketo
   * @return marketo
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesMarketo getMarketo() {
    return marketo;
  }

  public void setMarketo(@javax.annotation.Nullable DestinationConnectorPropertiesMarketo marketo) {
    this.marketo = marketo;
  }


  public DestinationConnectorProperties customConnector(@javax.annotation.Nullable DestinationConnectorPropertiesCustomConnector customConnector) {
    this.customConnector = customConnector;
    return this;
  }

  /**
   * Get customConnector
   * @return customConnector
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesCustomConnector getCustomConnector() {
    return customConnector;
  }

  public void setCustomConnector(@javax.annotation.Nullable DestinationConnectorPropertiesCustomConnector customConnector) {
    this.customConnector = customConnector;
  }


  public DestinationConnectorProperties saPOData(@javax.annotation.Nullable DestinationConnectorPropertiesSAPOData saPOData) {
    this.saPOData = saPOData;
    return this;
  }

  /**
   * Get saPOData
   * @return saPOData
   */
  @javax.annotation.Nullable
  public DestinationConnectorPropertiesSAPOData getSaPOData() {
    return saPOData;
  }

  public void setSaPOData(@javax.annotation.Nullable DestinationConnectorPropertiesSAPOData saPOData) {
    this.saPOData = saPOData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationConnectorProperties destinationConnectorProperties = (DestinationConnectorProperties) o;
    return Objects.equals(this.redshift, destinationConnectorProperties.redshift) &&
        Objects.equals(this.S3, destinationConnectorProperties.S3) &&
        Objects.equals(this.salesforce, destinationConnectorProperties.salesforce) &&
        Objects.equals(this.snowflake, destinationConnectorProperties.snowflake) &&
        Objects.equals(this.eventBridge, destinationConnectorProperties.eventBridge) &&
        Objects.equals(this.lookoutMetrics, destinationConnectorProperties.lookoutMetrics) &&
        Objects.equals(this.upsolver, destinationConnectorProperties.upsolver) &&
        Objects.equals(this.honeycode, destinationConnectorProperties.honeycode) &&
        Objects.equals(this.customerProfiles, destinationConnectorProperties.customerProfiles) &&
        Objects.equals(this.zendesk, destinationConnectorProperties.zendesk) &&
        Objects.equals(this.marketo, destinationConnectorProperties.marketo) &&
        Objects.equals(this.customConnector, destinationConnectorProperties.customConnector) &&
        Objects.equals(this.saPOData, destinationConnectorProperties.saPOData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(redshift, S3, salesforce, snowflake, eventBridge, lookoutMetrics, upsolver, honeycode, customerProfiles, zendesk, marketo, customConnector, saPOData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationConnectorProperties {\n");
    sb.append("    redshift: ").append(toIndentedString(redshift)).append("\n");
    sb.append("    S3: ").append(toIndentedString(S3)).append("\n");
    sb.append("    salesforce: ").append(toIndentedString(salesforce)).append("\n");
    sb.append("    snowflake: ").append(toIndentedString(snowflake)).append("\n");
    sb.append("    eventBridge: ").append(toIndentedString(eventBridge)).append("\n");
    sb.append("    lookoutMetrics: ").append(toIndentedString(lookoutMetrics)).append("\n");
    sb.append("    upsolver: ").append(toIndentedString(upsolver)).append("\n");
    sb.append("    honeycode: ").append(toIndentedString(honeycode)).append("\n");
    sb.append("    customerProfiles: ").append(toIndentedString(customerProfiles)).append("\n");
    sb.append("    zendesk: ").append(toIndentedString(zendesk)).append("\n");
    sb.append("    marketo: ").append(toIndentedString(marketo)).append("\n");
    sb.append("    customConnector: ").append(toIndentedString(customConnector)).append("\n");
    sb.append("    saPOData: ").append(toIndentedString(saPOData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Redshift");
    openapiFields.add("S3");
    openapiFields.add("Salesforce");
    openapiFields.add("Snowflake");
    openapiFields.add("EventBridge");
    openapiFields.add("LookoutMetrics");
    openapiFields.add("Upsolver");
    openapiFields.add("Honeycode");
    openapiFields.add("CustomerProfiles");
    openapiFields.add("Zendesk");
    openapiFields.add("Marketo");
    openapiFields.add("CustomConnector");
    openapiFields.add("SAPOData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinationConnectorProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinationConnectorProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinationConnectorProperties is not found in the empty JSON string", DestinationConnectorProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinationConnectorProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinationConnectorProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Redshift`
      if (jsonObj.get("Redshift") != null && !jsonObj.get("Redshift").isJsonNull()) {
        DestinationConnectorPropertiesRedshift.validateJsonElement(jsonObj.get("Redshift"));
      }
      // validate the optional field `S3`
      if (jsonObj.get("S3") != null && !jsonObj.get("S3").isJsonNull()) {
        DestinationConnectorPropertiesS3.validateJsonElement(jsonObj.get("S3"));
      }
      // validate the optional field `Salesforce`
      if (jsonObj.get("Salesforce") != null && !jsonObj.get("Salesforce").isJsonNull()) {
        DestinationConnectorPropertiesSalesforce.validateJsonElement(jsonObj.get("Salesforce"));
      }
      // validate the optional field `Snowflake`
      if (jsonObj.get("Snowflake") != null && !jsonObj.get("Snowflake").isJsonNull()) {
        DestinationConnectorPropertiesSnowflake.validateJsonElement(jsonObj.get("Snowflake"));
      }
      // validate the optional field `EventBridge`
      if (jsonObj.get("EventBridge") != null && !jsonObj.get("EventBridge").isJsonNull()) {
        DestinationConnectorPropertiesEventBridge.validateJsonElement(jsonObj.get("EventBridge"));
      }
      // validate the optional field `LookoutMetrics`
      if (jsonObj.get("LookoutMetrics") != null && !jsonObj.get("LookoutMetrics").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("LookoutMetrics"));
      }
      // validate the optional field `Upsolver`
      if (jsonObj.get("Upsolver") != null && !jsonObj.get("Upsolver").isJsonNull()) {
        DestinationConnectorPropertiesUpsolver.validateJsonElement(jsonObj.get("Upsolver"));
      }
      // validate the optional field `Honeycode`
      if (jsonObj.get("Honeycode") != null && !jsonObj.get("Honeycode").isJsonNull()) {
        DestinationConnectorPropertiesHoneycode.validateJsonElement(jsonObj.get("Honeycode"));
      }
      // validate the optional field `CustomerProfiles`
      if (jsonObj.get("CustomerProfiles") != null && !jsonObj.get("CustomerProfiles").isJsonNull()) {
        DestinationConnectorPropertiesCustomerProfiles.validateJsonElement(jsonObj.get("CustomerProfiles"));
      }
      // validate the optional field `Zendesk`
      if (jsonObj.get("Zendesk") != null && !jsonObj.get("Zendesk").isJsonNull()) {
        DestinationConnectorPropertiesZendesk.validateJsonElement(jsonObj.get("Zendesk"));
      }
      // validate the optional field `Marketo`
      if (jsonObj.get("Marketo") != null && !jsonObj.get("Marketo").isJsonNull()) {
        DestinationConnectorPropertiesMarketo.validateJsonElement(jsonObj.get("Marketo"));
      }
      // validate the optional field `CustomConnector`
      if (jsonObj.get("CustomConnector") != null && !jsonObj.get("CustomConnector").isJsonNull()) {
        DestinationConnectorPropertiesCustomConnector.validateJsonElement(jsonObj.get("CustomConnector"));
      }
      // validate the optional field `SAPOData`
      if (jsonObj.get("SAPOData") != null && !jsonObj.get("SAPOData").isJsonNull()) {
        DestinationConnectorPropertiesSAPOData.validateJsonElement(jsonObj.get("SAPOData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinationConnectorProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinationConnectorProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinationConnectorProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinationConnectorProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinationConnectorProperties>() {
           @Override
           public void write(JsonWriter out, DestinationConnectorProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinationConnectorProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinationConnectorProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinationConnectorProperties
   * @throws IOException if the JSON string is invalid with respect to DestinationConnectorProperties
   */
  public static DestinationConnectorProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinationConnectorProperties.class);
  }

  /**
   * Convert an instance of DestinationConnectorProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

