/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsConnectorProfileCredentialsOAuthRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConnectorProfileCredentialsSlack
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class ConnectorProfileCredentialsSlack {
  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nonnull
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  @javax.annotation.Nonnull
  private String clientSecret;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  @javax.annotation.Nullable
  private String accessToken;

  public static final String SERIALIZED_NAME_O_AUTH_REQUEST = "oAuthRequest";
  @SerializedName(SERIALIZED_NAME_O_AUTH_REQUEST)
  @javax.annotation.Nullable
  private GoogleAnalyticsConnectorProfileCredentialsOAuthRequest oAuthRequest;

  public ConnectorProfileCredentialsSlack() {
  }

  public ConnectorProfileCredentialsSlack clientId(@javax.annotation.Nonnull String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nonnull String clientId) {
    this.clientId = clientId;
  }


  public ConnectorProfileCredentialsSlack clientSecret(@javax.annotation.Nonnull String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Get clientSecret
   * @return clientSecret
   */
  @javax.annotation.Nonnull
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(@javax.annotation.Nonnull String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public ConnectorProfileCredentialsSlack accessToken(@javax.annotation.Nullable String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * Get accessToken
   * @return accessToken
   */
  @javax.annotation.Nullable
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(@javax.annotation.Nullable String accessToken) {
    this.accessToken = accessToken;
  }


  public ConnectorProfileCredentialsSlack oAuthRequest(@javax.annotation.Nullable GoogleAnalyticsConnectorProfileCredentialsOAuthRequest oAuthRequest) {
    this.oAuthRequest = oAuthRequest;
    return this;
  }

  /**
   * Get oAuthRequest
   * @return oAuthRequest
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsConnectorProfileCredentialsOAuthRequest getoAuthRequest() {
    return oAuthRequest;
  }

  public void setoAuthRequest(@javax.annotation.Nullable GoogleAnalyticsConnectorProfileCredentialsOAuthRequest oAuthRequest) {
    this.oAuthRequest = oAuthRequest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorProfileCredentialsSlack connectorProfileCredentialsSlack = (ConnectorProfileCredentialsSlack) o;
    return Objects.equals(this.clientId, connectorProfileCredentialsSlack.clientId) &&
        Objects.equals(this.clientSecret, connectorProfileCredentialsSlack.clientSecret) &&
        Objects.equals(this.accessToken, connectorProfileCredentialsSlack.accessToken) &&
        Objects.equals(this.oAuthRequest, connectorProfileCredentialsSlack.oAuthRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientSecret, accessToken, oAuthRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorProfileCredentialsSlack {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    oAuthRequest: ").append(toIndentedString(oAuthRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("accessToken");
    openapiFields.add("oAuthRequest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientId");
    openapiRequiredFields.add("clientSecret");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorProfileCredentialsSlack
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorProfileCredentialsSlack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorProfileCredentialsSlack is not found in the empty JSON string", ConnectorProfileCredentialsSlack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorProfileCredentialsSlack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorProfileCredentialsSlack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectorProfileCredentialsSlack.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `clientId`
      String.validateJsonElement(jsonObj.get("clientId"));
      // validate the required field `clientSecret`
      String.validateJsonElement(jsonObj.get("clientSecret"));
      // validate the optional field `accessToken`
      if (jsonObj.get("accessToken") != null && !jsonObj.get("accessToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("accessToken"));
      }
      // validate the optional field `oAuthRequest`
      if (jsonObj.get("oAuthRequest") != null && !jsonObj.get("oAuthRequest").isJsonNull()) {
        GoogleAnalyticsConnectorProfileCredentialsOAuthRequest.validateJsonElement(jsonObj.get("oAuthRequest"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorProfileCredentialsSlack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorProfileCredentialsSlack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorProfileCredentialsSlack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorProfileCredentialsSlack.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorProfileCredentialsSlack>() {
           @Override
           public void write(JsonWriter out, ConnectorProfileCredentialsSlack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorProfileCredentialsSlack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorProfileCredentialsSlack given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorProfileCredentialsSlack
   * @throws IOException if the JSON string is invalid with respect to ConnectorProfileCredentialsSlack
   */
  public static ConnectorProfileCredentialsSlack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorProfileCredentialsSlack.class);
  }

  /**
   * Convert an instance of ConnectorProfileCredentialsSlack to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

