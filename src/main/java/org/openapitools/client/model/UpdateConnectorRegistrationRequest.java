/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RegisterConnectorRequestConnectorProvisioningConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateConnectorRegistrationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class UpdateConnectorRegistrationRequest {
  public static final String SERIALIZED_NAME_CONNECTOR_LABEL = "connectorLabel";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_LABEL)
  @javax.annotation.Nonnull
  private String connectorLabel;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_CONNECTOR_PROVISIONING_CONFIG = "connectorProvisioningConfig";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROVISIONING_CONFIG)
  @javax.annotation.Nullable
  private RegisterConnectorRequestConnectorProvisioningConfig connectorProvisioningConfig;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  @javax.annotation.Nullable
  private String clientToken;

  public UpdateConnectorRegistrationRequest() {
  }

  public UpdateConnectorRegistrationRequest connectorLabel(@javax.annotation.Nonnull String connectorLabel) {
    this.connectorLabel = connectorLabel;
    return this;
  }

  /**
   * The name of the connector. The name is unique for each connector registration in your AWS account.
   * @return connectorLabel
   */
  @javax.annotation.Nonnull
  public String getConnectorLabel() {
    return connectorLabel;
  }

  public void setConnectorLabel(@javax.annotation.Nonnull String connectorLabel) {
    this.connectorLabel = connectorLabel;
  }


  public UpdateConnectorRegistrationRequest description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A description about the update that you&#39;re applying to the connector.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdateConnectorRegistrationRequest connectorProvisioningConfig(@javax.annotation.Nullable RegisterConnectorRequestConnectorProvisioningConfig connectorProvisioningConfig) {
    this.connectorProvisioningConfig = connectorProvisioningConfig;
    return this;
  }

  /**
   * Get connectorProvisioningConfig
   * @return connectorProvisioningConfig
   */
  @javax.annotation.Nullable
  public RegisterConnectorRequestConnectorProvisioningConfig getConnectorProvisioningConfig() {
    return connectorProvisioningConfig;
  }

  public void setConnectorProvisioningConfig(@javax.annotation.Nullable RegisterConnectorRequestConnectorProvisioningConfig connectorProvisioningConfig) {
    this.connectorProvisioningConfig = connectorProvisioningConfig;
  }


  public UpdateConnectorRegistrationRequest clientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * &lt;p&gt;The &lt;code&gt;clientToken&lt;/code&gt; parameter is an idempotency token. It ensures that your &lt;code&gt;UpdateConnectorRegistration&lt;/code&gt; request completes only once. You choose the value to pass. For example, if you don&#39;t receive a response from your request, you can safely retry the request with the same &lt;code&gt;clientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you omit a &lt;code&gt;clientToken&lt;/code&gt; value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.&lt;/p&gt; &lt;p&gt;If you specify input parameters that differ from your first request, an error occurs. If you use a different value for &lt;code&gt;clientToken&lt;/code&gt;, Amazon AppFlow considers it a new call to &lt;code&gt;UpdateConnectorRegistration&lt;/code&gt;. The token is active for 8 hours.&lt;/p&gt;
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateConnectorRegistrationRequest updateConnectorRegistrationRequest = (UpdateConnectorRegistrationRequest) o;
    return Objects.equals(this.connectorLabel, updateConnectorRegistrationRequest.connectorLabel) &&
        Objects.equals(this.description, updateConnectorRegistrationRequest.description) &&
        Objects.equals(this.connectorProvisioningConfig, updateConnectorRegistrationRequest.connectorProvisioningConfig) &&
        Objects.equals(this.clientToken, updateConnectorRegistrationRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorLabel, description, connectorProvisioningConfig, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateConnectorRegistrationRequest {\n");
    sb.append("    connectorLabel: ").append(toIndentedString(connectorLabel)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    connectorProvisioningConfig: ").append(toIndentedString(connectorProvisioningConfig)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorLabel");
    openapiFields.add("description");
    openapiFields.add("connectorProvisioningConfig");
    openapiFields.add("clientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectorLabel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateConnectorRegistrationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateConnectorRegistrationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateConnectorRegistrationRequest is not found in the empty JSON string", UpdateConnectorRegistrationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateConnectorRegistrationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateConnectorRegistrationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateConnectorRegistrationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connectorLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorLabel").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `connectorProvisioningConfig`
      if (jsonObj.get("connectorProvisioningConfig") != null && !jsonObj.get("connectorProvisioningConfig").isJsonNull()) {
        RegisterConnectorRequestConnectorProvisioningConfig.validateJsonElement(jsonObj.get("connectorProvisioningConfig"));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateConnectorRegistrationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateConnectorRegistrationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateConnectorRegistrationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateConnectorRegistrationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateConnectorRegistrationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateConnectorRegistrationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateConnectorRegistrationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateConnectorRegistrationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateConnectorRegistrationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateConnectorRegistrationRequest
   */
  public static UpdateConnectorRegistrationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateConnectorRegistrationRequest.class);
  }

  /**
   * Convert an instance of UpdateConnectorRegistrationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

