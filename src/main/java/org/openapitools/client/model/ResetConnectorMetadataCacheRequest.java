/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResetConnectorMetadataCacheRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class ResetConnectorMetadataCacheRequest {
  public static final String SERIALIZED_NAME_CONNECTOR_PROFILE_NAME = "connectorProfileName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROFILE_NAME)
  @javax.annotation.Nullable
  private String connectorProfileName;

  /**
   * &lt;p&gt;The type of connector to reset cached metadata for.&lt;/p&gt; &lt;p&gt;You must include this parameter in your request if you&#39;re resetting the cache for any of the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you&#39;re resetting the cache for any other connector, you can omit this parameter from your request. &lt;/p&gt;
   */
  @JsonAdapter(ConnectorTypeEnum.Adapter.class)
  public enum ConnectorTypeEnum {
    SALESFORCE("Salesforce"),
    
    SINGULAR("Singular"),
    
    SLACK("Slack"),
    
    REDSHIFT("Redshift"),
    
    S3("S3"),
    
    MARKETO("Marketo"),
    
    GOOGLEANALYTICS("Googleanalytics"),
    
    ZENDESK("Zendesk"),
    
    SERVICENOW("Servicenow"),
    
    DATADOG("Datadog"),
    
    TRENDMICRO("Trendmicro"),
    
    SNOWFLAKE("Snowflake"),
    
    DYNATRACE("Dynatrace"),
    
    INFORNEXUS("Infornexus"),
    
    AMPLITUDE("Amplitude"),
    
    VEEVA("Veeva"),
    
    EVENT_BRIDGE("EventBridge"),
    
    LOOKOUT_METRICS("LookoutMetrics"),
    
    UPSOLVER("Upsolver"),
    
    HONEYCODE("Honeycode"),
    
    CUSTOMER_PROFILES("CustomerProfiles"),
    
    SAPO_DATA("SAPOData"),
    
    CUSTOM_CONNECTOR("CustomConnector"),
    
    PARDOT("Pardot");

    private String value;

    ConnectorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectorTypeEnum fromValue(String value) {
      for (ConnectorTypeEnum b : ConnectorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  @javax.annotation.Nullable
  private ConnectorTypeEnum connectorType;

  public static final String SERIALIZED_NAME_CONNECTOR_ENTITY_NAME = "connectorEntityName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ENTITY_NAME)
  @javax.annotation.Nullable
  private String connectorEntityName;

  public static final String SERIALIZED_NAME_ENTITIES_PATH = "entitiesPath";
  @SerializedName(SERIALIZED_NAME_ENTITIES_PATH)
  @javax.annotation.Nullable
  private String entitiesPath;

  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  @javax.annotation.Nullable
  private String apiVersion;

  public ResetConnectorMetadataCacheRequest() {
  }

  public ResetConnectorMetadataCacheRequest connectorProfileName(@javax.annotation.Nullable String connectorProfileName) {
    this.connectorProfileName = connectorProfileName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the connector profile that you want to reset cached metadata for.&lt;/p&gt; &lt;p&gt;You can omit this parameter if you&#39;re resetting the cache for any of the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you&#39;re resetting the cache for any other connector, you must include this parameter in your request.&lt;/p&gt;
   * @return connectorProfileName
   */
  @javax.annotation.Nullable
  public String getConnectorProfileName() {
    return connectorProfileName;
  }

  public void setConnectorProfileName(@javax.annotation.Nullable String connectorProfileName) {
    this.connectorProfileName = connectorProfileName;
  }


  public ResetConnectorMetadataCacheRequest connectorType(@javax.annotation.Nullable ConnectorTypeEnum connectorType) {
    this.connectorType = connectorType;
    return this;
  }

  /**
   * &lt;p&gt;The type of connector to reset cached metadata for.&lt;/p&gt; &lt;p&gt;You must include this parameter in your request if you&#39;re resetting the cache for any of the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you&#39;re resetting the cache for any other connector, you can omit this parameter from your request. &lt;/p&gt;
   * @return connectorType
   */
  @javax.annotation.Nullable
  public ConnectorTypeEnum getConnectorType() {
    return connectorType;
  }

  public void setConnectorType(@javax.annotation.Nullable ConnectorTypeEnum connectorType) {
    this.connectorType = connectorType;
  }


  public ResetConnectorMetadataCacheRequest connectorEntityName(@javax.annotation.Nullable String connectorEntityName) {
    this.connectorEntityName = connectorEntityName;
    return this;
  }

  /**
   * &lt;p&gt;Use this parameter if you want to reset cached metadata about the details for an individual entity.&lt;/p&gt; &lt;p&gt;If you don&#39;t include this parameter in your request, Amazon AppFlow only resets cached metadata about entity names, not entity details.&lt;/p&gt;
   * @return connectorEntityName
   */
  @javax.annotation.Nullable
  public String getConnectorEntityName() {
    return connectorEntityName;
  }

  public void setConnectorEntityName(@javax.annotation.Nullable String connectorEntityName) {
    this.connectorEntityName = connectorEntityName;
  }


  public ResetConnectorMetadataCacheRequest entitiesPath(@javax.annotation.Nullable String entitiesPath) {
    this.entitiesPath = entitiesPath;
    return this;
  }

  /**
   * &lt;p&gt;Use this parameter only if youâ€™re resetting the cached metadata about a nested entity. Only some connectors support nested entities. A nested entity is one that has another entity as a parent. To use this parameter, specify the name of the parent entity.&lt;/p&gt; &lt;p&gt;To look up the parent-child relationship of entities, you can send a ListConnectorEntities request that omits the entitiesPath parameter. Amazon AppFlow will return a list of top-level entities. For each one, it indicates whether the entity has nested entities. Then, in a subsequent ListConnectorEntities request, you can specify a parent entity name for the entitiesPath parameter. Amazon AppFlow will return a list of the child entities for that parent.&lt;/p&gt;
   * @return entitiesPath
   */
  @javax.annotation.Nullable
  public String getEntitiesPath() {
    return entitiesPath;
  }

  public void setEntitiesPath(@javax.annotation.Nullable String entitiesPath) {
    this.entitiesPath = entitiesPath;
  }


  public ResetConnectorMetadataCacheRequest apiVersion(@javax.annotation.Nullable String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * &lt;p&gt;The API version that you specified in the connector profile that youâ€™re resetting cached metadata for. You must use this parameter only if the connector supports multiple API versions or if the connector type is CustomConnector.&lt;/p&gt; &lt;p&gt;To look up how many versions a connector supports, use the DescribeConnectors action. In the response, find the value that Amazon AppFlow returns for the connectorVersion parameter.&lt;/p&gt; &lt;p&gt;To look up the connector type, use the DescribeConnectorProfiles action. In the response, find the value that Amazon AppFlow returns for the connectorType parameter.&lt;/p&gt; &lt;p&gt;To look up the API version that you specified in a connector profile, use the DescribeConnectorProfiles action.&lt;/p&gt;
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(@javax.annotation.Nullable String apiVersion) {
    this.apiVersion = apiVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResetConnectorMetadataCacheRequest resetConnectorMetadataCacheRequest = (ResetConnectorMetadataCacheRequest) o;
    return Objects.equals(this.connectorProfileName, resetConnectorMetadataCacheRequest.connectorProfileName) &&
        Objects.equals(this.connectorType, resetConnectorMetadataCacheRequest.connectorType) &&
        Objects.equals(this.connectorEntityName, resetConnectorMetadataCacheRequest.connectorEntityName) &&
        Objects.equals(this.entitiesPath, resetConnectorMetadataCacheRequest.entitiesPath) &&
        Objects.equals(this.apiVersion, resetConnectorMetadataCacheRequest.apiVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorProfileName, connectorType, connectorEntityName, entitiesPath, apiVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResetConnectorMetadataCacheRequest {\n");
    sb.append("    connectorProfileName: ").append(toIndentedString(connectorProfileName)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    connectorEntityName: ").append(toIndentedString(connectorEntityName)).append("\n");
    sb.append("    entitiesPath: ").append(toIndentedString(entitiesPath)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorProfileName");
    openapiFields.add("connectorType");
    openapiFields.add("connectorEntityName");
    openapiFields.add("entitiesPath");
    openapiFields.add("apiVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResetConnectorMetadataCacheRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResetConnectorMetadataCacheRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResetConnectorMetadataCacheRequest is not found in the empty JSON string", ResetConnectorMetadataCacheRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResetConnectorMetadataCacheRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResetConnectorMetadataCacheRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectorProfileName") != null && !jsonObj.get("connectorProfileName").isJsonNull()) && !jsonObj.get("connectorProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorProfileName").toString()));
      }
      if ((jsonObj.get("connectorType") != null && !jsonObj.get("connectorType").isJsonNull()) && !jsonObj.get("connectorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorType").toString()));
      }
      // validate the optional field `connectorType`
      if (jsonObj.get("connectorType") != null && !jsonObj.get("connectorType").isJsonNull()) {
        ConnectorTypeEnum.validateJsonElement(jsonObj.get("connectorType"));
      }
      if ((jsonObj.get("connectorEntityName") != null && !jsonObj.get("connectorEntityName").isJsonNull()) && !jsonObj.get("connectorEntityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorEntityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorEntityName").toString()));
      }
      if ((jsonObj.get("entitiesPath") != null && !jsonObj.get("entitiesPath").isJsonNull()) && !jsonObj.get("entitiesPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entitiesPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entitiesPath").toString()));
      }
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResetConnectorMetadataCacheRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResetConnectorMetadataCacheRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResetConnectorMetadataCacheRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResetConnectorMetadataCacheRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ResetConnectorMetadataCacheRequest>() {
           @Override
           public void write(JsonWriter out, ResetConnectorMetadataCacheRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResetConnectorMetadataCacheRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResetConnectorMetadataCacheRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResetConnectorMetadataCacheRequest
   * @throws IOException if the JSON string is invalid with respect to ResetConnectorMetadataCacheRequest
   */
  public static ResetConnectorMetadataCacheRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResetConnectorMetadataCacheRequest.class);
  }

  /**
   * Convert an instance of ResetConnectorMetadataCacheRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

