/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.S3OutputFormatConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinationConnectorPropertiesS3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class DestinationConnectorPropertiesS3 {
  public static final String SERIALIZED_NAME_BUCKET_NAME = "bucketName";
  @SerializedName(SERIALIZED_NAME_BUCKET_NAME)
  @javax.annotation.Nonnull
  private String bucketName;

  public static final String SERIALIZED_NAME_BUCKET_PREFIX = "bucketPrefix";
  @SerializedName(SERIALIZED_NAME_BUCKET_PREFIX)
  @javax.annotation.Nullable
  private String bucketPrefix;

  public static final String SERIALIZED_NAME_S3_OUTPUT_FORMAT_CONFIG = "s3OutputFormatConfig";
  @SerializedName(SERIALIZED_NAME_S3_OUTPUT_FORMAT_CONFIG)
  @javax.annotation.Nullable
  private S3OutputFormatConfig s3OutputFormatConfig;

  public DestinationConnectorPropertiesS3() {
  }

  public DestinationConnectorPropertiesS3 bucketName(@javax.annotation.Nonnull String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

  /**
   * Get bucketName
   * @return bucketName
   */
  @javax.annotation.Nonnull
  public String getBucketName() {
    return bucketName;
  }

  public void setBucketName(@javax.annotation.Nonnull String bucketName) {
    this.bucketName = bucketName;
  }


  public DestinationConnectorPropertiesS3 bucketPrefix(@javax.annotation.Nullable String bucketPrefix) {
    this.bucketPrefix = bucketPrefix;
    return this;
  }

  /**
   * Get bucketPrefix
   * @return bucketPrefix
   */
  @javax.annotation.Nullable
  public String getBucketPrefix() {
    return bucketPrefix;
  }

  public void setBucketPrefix(@javax.annotation.Nullable String bucketPrefix) {
    this.bucketPrefix = bucketPrefix;
  }


  public DestinationConnectorPropertiesS3 s3OutputFormatConfig(@javax.annotation.Nullable S3OutputFormatConfig s3OutputFormatConfig) {
    this.s3OutputFormatConfig = s3OutputFormatConfig;
    return this;
  }

  /**
   * Get s3OutputFormatConfig
   * @return s3OutputFormatConfig
   */
  @javax.annotation.Nullable
  public S3OutputFormatConfig getS3OutputFormatConfig() {
    return s3OutputFormatConfig;
  }

  public void setS3OutputFormatConfig(@javax.annotation.Nullable S3OutputFormatConfig s3OutputFormatConfig) {
    this.s3OutputFormatConfig = s3OutputFormatConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationConnectorPropertiesS3 destinationConnectorPropertiesS3 = (DestinationConnectorPropertiesS3) o;
    return Objects.equals(this.bucketName, destinationConnectorPropertiesS3.bucketName) &&
        Objects.equals(this.bucketPrefix, destinationConnectorPropertiesS3.bucketPrefix) &&
        Objects.equals(this.s3OutputFormatConfig, destinationConnectorPropertiesS3.s3OutputFormatConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketName, bucketPrefix, s3OutputFormatConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationConnectorPropertiesS3 {\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    bucketPrefix: ").append(toIndentedString(bucketPrefix)).append("\n");
    sb.append("    s3OutputFormatConfig: ").append(toIndentedString(s3OutputFormatConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketName");
    openapiFields.add("bucketPrefix");
    openapiFields.add("s3OutputFormatConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bucketName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinationConnectorPropertiesS3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinationConnectorPropertiesS3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinationConnectorPropertiesS3 is not found in the empty JSON string", DestinationConnectorPropertiesS3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinationConnectorPropertiesS3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinationConnectorPropertiesS3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DestinationConnectorPropertiesS3.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `bucketName`
      String.validateJsonElement(jsonObj.get("bucketName"));
      // validate the optional field `bucketPrefix`
      if (jsonObj.get("bucketPrefix") != null && !jsonObj.get("bucketPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("bucketPrefix"));
      }
      // validate the optional field `s3OutputFormatConfig`
      if (jsonObj.get("s3OutputFormatConfig") != null && !jsonObj.get("s3OutputFormatConfig").isJsonNull()) {
        S3OutputFormatConfig.validateJsonElement(jsonObj.get("s3OutputFormatConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinationConnectorPropertiesS3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinationConnectorPropertiesS3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinationConnectorPropertiesS3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinationConnectorPropertiesS3.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinationConnectorPropertiesS3>() {
           @Override
           public void write(JsonWriter out, DestinationConnectorPropertiesS3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinationConnectorPropertiesS3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinationConnectorPropertiesS3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinationConnectorPropertiesS3
   * @throws IOException if the JSON string is invalid with respect to DestinationConnectorPropertiesS3
   */
  public static DestinationConnectorPropertiesS3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinationConnectorPropertiesS3.class);
  }

  /**
   * Convert an instance of DestinationConnectorPropertiesS3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

