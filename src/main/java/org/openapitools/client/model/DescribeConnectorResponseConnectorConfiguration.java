/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConnectorConfigurationAuthenticationConfig;
import org.openapitools.client.model.ConnectorConfigurationConnectorMetadata;
import org.openapitools.client.model.ConnectorConfigurationConnectorProvisioningConfig;
import org.openapitools.client.model.ConnectorProvisioningType;
import org.openapitools.client.model.ConnectorType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeConnectorResponseConnectorConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class DescribeConnectorResponseConnectorConfiguration {
  public static final String SERIALIZED_NAME_CAN_USE_AS_SOURCE = "canUseAsSource";
  @SerializedName(SERIALIZED_NAME_CAN_USE_AS_SOURCE)
  @javax.annotation.Nullable
  private Boolean canUseAsSource;

  public static final String SERIALIZED_NAME_CAN_USE_AS_DESTINATION = "canUseAsDestination";
  @SerializedName(SERIALIZED_NAME_CAN_USE_AS_DESTINATION)
  @javax.annotation.Nullable
  private Boolean canUseAsDestination;

  public static final String SERIALIZED_NAME_SUPPORTED_DESTINATION_CONNECTORS = "supportedDestinationConnectors";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_DESTINATION_CONNECTORS)
  @javax.annotation.Nullable
  private List supportedDestinationConnectors;

  public static final String SERIALIZED_NAME_SUPPORTED_SCHEDULING_FREQUENCIES = "supportedSchedulingFrequencies";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_SCHEDULING_FREQUENCIES)
  @javax.annotation.Nullable
  private List supportedSchedulingFrequencies;

  public static final String SERIALIZED_NAME_IS_PRIVATE_LINK_ENABLED = "isPrivateLinkEnabled";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE_LINK_ENABLED)
  @javax.annotation.Nullable
  private Boolean isPrivateLinkEnabled;

  public static final String SERIALIZED_NAME_IS_PRIVATE_LINK_ENDPOINT_URL_REQUIRED = "isPrivateLinkEndpointUrlRequired";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE_LINK_ENDPOINT_URL_REQUIRED)
  @javax.annotation.Nullable
  private Boolean isPrivateLinkEndpointUrlRequired;

  public static final String SERIALIZED_NAME_SUPPORTED_TRIGGER_TYPES = "supportedTriggerTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_TRIGGER_TYPES)
  @javax.annotation.Nullable
  private List supportedTriggerTypes;

  public static final String SERIALIZED_NAME_CONNECTOR_METADATA = "connectorMetadata";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_METADATA)
  @javax.annotation.Nullable
  private ConnectorConfigurationConnectorMetadata connectorMetadata;

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  @javax.annotation.Nullable
  private ConnectorType connectorType;

  public static final String SERIALIZED_NAME_CONNECTOR_LABEL = "connectorLabel";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_LABEL)
  @javax.annotation.Nullable
  private String connectorLabel;

  public static final String SERIALIZED_NAME_CONNECTOR_DESCRIPTION = "connectorDescription";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_DESCRIPTION)
  @javax.annotation.Nullable
  private String connectorDescription;

  public static final String SERIALIZED_NAME_CONNECTOR_OWNER = "connectorOwner";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_OWNER)
  @javax.annotation.Nullable
  private String connectorOwner;

  public static final String SERIALIZED_NAME_CONNECTOR_NAME = "connectorName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_NAME)
  @javax.annotation.Nullable
  private String connectorName;

  public static final String SERIALIZED_NAME_CONNECTOR_VERSION = "connectorVersion";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_VERSION)
  @javax.annotation.Nullable
  private String connectorVersion;

  public static final String SERIALIZED_NAME_CONNECTOR_ARN = "connectorArn";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ARN)
  @javax.annotation.Nullable
  private String connectorArn;

  public static final String SERIALIZED_NAME_CONNECTOR_MODES = "connectorModes";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_MODES)
  @javax.annotation.Nullable
  private List connectorModes;

  public static final String SERIALIZED_NAME_AUTHENTICATION_CONFIG = "authenticationConfig";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CONFIG)
  @javax.annotation.Nullable
  private ConnectorConfigurationAuthenticationConfig authenticationConfig;

  public static final String SERIALIZED_NAME_CONNECTOR_RUNTIME_SETTINGS = "connectorRuntimeSettings";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_RUNTIME_SETTINGS)
  @javax.annotation.Nullable
  private List connectorRuntimeSettings;

  public static final String SERIALIZED_NAME_SUPPORTED_API_VERSIONS = "supportedApiVersions";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_API_VERSIONS)
  @javax.annotation.Nullable
  private List supportedApiVersions;

  public static final String SERIALIZED_NAME_SUPPORTED_OPERATORS = "supportedOperators";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_OPERATORS)
  @javax.annotation.Nullable
  private List supportedOperators;

  public static final String SERIALIZED_NAME_SUPPORTED_WRITE_OPERATIONS = "supportedWriteOperations";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_WRITE_OPERATIONS)
  @javax.annotation.Nullable
  private List supportedWriteOperations;

  public static final String SERIALIZED_NAME_CONNECTOR_PROVISIONING_TYPE = "connectorProvisioningType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROVISIONING_TYPE)
  @javax.annotation.Nullable
  private ConnectorProvisioningType connectorProvisioningType;

  public static final String SERIALIZED_NAME_CONNECTOR_PROVISIONING_CONFIG = "connectorProvisioningConfig";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROVISIONING_CONFIG)
  @javax.annotation.Nullable
  private ConnectorConfigurationConnectorProvisioningConfig connectorProvisioningConfig;

  public static final String SERIALIZED_NAME_LOGO_U_R_L = "logoURL";
  @SerializedName(SERIALIZED_NAME_LOGO_U_R_L)
  @javax.annotation.Nullable
  private String logoURL;

  public static final String SERIALIZED_NAME_REGISTERED_AT = "registeredAt";
  @SerializedName(SERIALIZED_NAME_REGISTERED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime registeredAt;

  public static final String SERIALIZED_NAME_REGISTERED_BY = "registeredBy";
  @SerializedName(SERIALIZED_NAME_REGISTERED_BY)
  @javax.annotation.Nullable
  private String registeredBy;

  public static final String SERIALIZED_NAME_SUPPORTED_DATA_TRANSFER_TYPES = "supportedDataTransferTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_DATA_TRANSFER_TYPES)
  @javax.annotation.Nullable
  private List supportedDataTransferTypes;

  public static final String SERIALIZED_NAME_SUPPORTED_DATA_TRANSFER_APIS = "supportedDataTransferApis";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_DATA_TRANSFER_APIS)
  @javax.annotation.Nullable
  private List supportedDataTransferApis;

  public DescribeConnectorResponseConnectorConfiguration() {
  }

  public DescribeConnectorResponseConnectorConfiguration canUseAsSource(@javax.annotation.Nullable Boolean canUseAsSource) {
    this.canUseAsSource = canUseAsSource;
    return this;
  }

  /**
   * Get canUseAsSource
   * @return canUseAsSource
   */
  @javax.annotation.Nullable
  public Boolean getCanUseAsSource() {
    return canUseAsSource;
  }

  public void setCanUseAsSource(@javax.annotation.Nullable Boolean canUseAsSource) {
    this.canUseAsSource = canUseAsSource;
  }


  public DescribeConnectorResponseConnectorConfiguration canUseAsDestination(@javax.annotation.Nullable Boolean canUseAsDestination) {
    this.canUseAsDestination = canUseAsDestination;
    return this;
  }

  /**
   * Get canUseAsDestination
   * @return canUseAsDestination
   */
  @javax.annotation.Nullable
  public Boolean getCanUseAsDestination() {
    return canUseAsDestination;
  }

  public void setCanUseAsDestination(@javax.annotation.Nullable Boolean canUseAsDestination) {
    this.canUseAsDestination = canUseAsDestination;
  }


  public DescribeConnectorResponseConnectorConfiguration supportedDestinationConnectors(@javax.annotation.Nullable List supportedDestinationConnectors) {
    this.supportedDestinationConnectors = supportedDestinationConnectors;
    return this;
  }

  /**
   * Get supportedDestinationConnectors
   * @return supportedDestinationConnectors
   */
  @javax.annotation.Nullable
  public List getSupportedDestinationConnectors() {
    return supportedDestinationConnectors;
  }

  public void setSupportedDestinationConnectors(@javax.annotation.Nullable List supportedDestinationConnectors) {
    this.supportedDestinationConnectors = supportedDestinationConnectors;
  }


  public DescribeConnectorResponseConnectorConfiguration supportedSchedulingFrequencies(@javax.annotation.Nullable List supportedSchedulingFrequencies) {
    this.supportedSchedulingFrequencies = supportedSchedulingFrequencies;
    return this;
  }

  /**
   * Get supportedSchedulingFrequencies
   * @return supportedSchedulingFrequencies
   */
  @javax.annotation.Nullable
  public List getSupportedSchedulingFrequencies() {
    return supportedSchedulingFrequencies;
  }

  public void setSupportedSchedulingFrequencies(@javax.annotation.Nullable List supportedSchedulingFrequencies) {
    this.supportedSchedulingFrequencies = supportedSchedulingFrequencies;
  }


  public DescribeConnectorResponseConnectorConfiguration isPrivateLinkEnabled(@javax.annotation.Nullable Boolean isPrivateLinkEnabled) {
    this.isPrivateLinkEnabled = isPrivateLinkEnabled;
    return this;
  }

  /**
   * Get isPrivateLinkEnabled
   * @return isPrivateLinkEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivateLinkEnabled() {
    return isPrivateLinkEnabled;
  }

  public void setIsPrivateLinkEnabled(@javax.annotation.Nullable Boolean isPrivateLinkEnabled) {
    this.isPrivateLinkEnabled = isPrivateLinkEnabled;
  }


  public DescribeConnectorResponseConnectorConfiguration isPrivateLinkEndpointUrlRequired(@javax.annotation.Nullable Boolean isPrivateLinkEndpointUrlRequired) {
    this.isPrivateLinkEndpointUrlRequired = isPrivateLinkEndpointUrlRequired;
    return this;
  }

  /**
   * Get isPrivateLinkEndpointUrlRequired
   * @return isPrivateLinkEndpointUrlRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivateLinkEndpointUrlRequired() {
    return isPrivateLinkEndpointUrlRequired;
  }

  public void setIsPrivateLinkEndpointUrlRequired(@javax.annotation.Nullable Boolean isPrivateLinkEndpointUrlRequired) {
    this.isPrivateLinkEndpointUrlRequired = isPrivateLinkEndpointUrlRequired;
  }


  public DescribeConnectorResponseConnectorConfiguration supportedTriggerTypes(@javax.annotation.Nullable List supportedTriggerTypes) {
    this.supportedTriggerTypes = supportedTriggerTypes;
    return this;
  }

  /**
   * Get supportedTriggerTypes
   * @return supportedTriggerTypes
   */
  @javax.annotation.Nullable
  public List getSupportedTriggerTypes() {
    return supportedTriggerTypes;
  }

  public void setSupportedTriggerTypes(@javax.annotation.Nullable List supportedTriggerTypes) {
    this.supportedTriggerTypes = supportedTriggerTypes;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorMetadata(@javax.annotation.Nullable ConnectorConfigurationConnectorMetadata connectorMetadata) {
    this.connectorMetadata = connectorMetadata;
    return this;
  }

  /**
   * Get connectorMetadata
   * @return connectorMetadata
   */
  @javax.annotation.Nullable
  public ConnectorConfigurationConnectorMetadata getConnectorMetadata() {
    return connectorMetadata;
  }

  public void setConnectorMetadata(@javax.annotation.Nullable ConnectorConfigurationConnectorMetadata connectorMetadata) {
    this.connectorMetadata = connectorMetadata;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorType(@javax.annotation.Nullable ConnectorType connectorType) {
    this.connectorType = connectorType;
    return this;
  }

  /**
   * Get connectorType
   * @return connectorType
   */
  @javax.annotation.Nullable
  public ConnectorType getConnectorType() {
    return connectorType;
  }

  public void setConnectorType(@javax.annotation.Nullable ConnectorType connectorType) {
    this.connectorType = connectorType;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorLabel(@javax.annotation.Nullable String connectorLabel) {
    this.connectorLabel = connectorLabel;
    return this;
  }

  /**
   * Get connectorLabel
   * @return connectorLabel
   */
  @javax.annotation.Nullable
  public String getConnectorLabel() {
    return connectorLabel;
  }

  public void setConnectorLabel(@javax.annotation.Nullable String connectorLabel) {
    this.connectorLabel = connectorLabel;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorDescription(@javax.annotation.Nullable String connectorDescription) {
    this.connectorDescription = connectorDescription;
    return this;
  }

  /**
   * Get connectorDescription
   * @return connectorDescription
   */
  @javax.annotation.Nullable
  public String getConnectorDescription() {
    return connectorDescription;
  }

  public void setConnectorDescription(@javax.annotation.Nullable String connectorDescription) {
    this.connectorDescription = connectorDescription;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorOwner(@javax.annotation.Nullable String connectorOwner) {
    this.connectorOwner = connectorOwner;
    return this;
  }

  /**
   * Get connectorOwner
   * @return connectorOwner
   */
  @javax.annotation.Nullable
  public String getConnectorOwner() {
    return connectorOwner;
  }

  public void setConnectorOwner(@javax.annotation.Nullable String connectorOwner) {
    this.connectorOwner = connectorOwner;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorName(@javax.annotation.Nullable String connectorName) {
    this.connectorName = connectorName;
    return this;
  }

  /**
   * Get connectorName
   * @return connectorName
   */
  @javax.annotation.Nullable
  public String getConnectorName() {
    return connectorName;
  }

  public void setConnectorName(@javax.annotation.Nullable String connectorName) {
    this.connectorName = connectorName;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorVersion(@javax.annotation.Nullable String connectorVersion) {
    this.connectorVersion = connectorVersion;
    return this;
  }

  /**
   * Get connectorVersion
   * @return connectorVersion
   */
  @javax.annotation.Nullable
  public String getConnectorVersion() {
    return connectorVersion;
  }

  public void setConnectorVersion(@javax.annotation.Nullable String connectorVersion) {
    this.connectorVersion = connectorVersion;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorArn(@javax.annotation.Nullable String connectorArn) {
    this.connectorArn = connectorArn;
    return this;
  }

  /**
   * Get connectorArn
   * @return connectorArn
   */
  @javax.annotation.Nullable
  public String getConnectorArn() {
    return connectorArn;
  }

  public void setConnectorArn(@javax.annotation.Nullable String connectorArn) {
    this.connectorArn = connectorArn;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorModes(@javax.annotation.Nullable List connectorModes) {
    this.connectorModes = connectorModes;
    return this;
  }

  /**
   * Get connectorModes
   * @return connectorModes
   */
  @javax.annotation.Nullable
  public List getConnectorModes() {
    return connectorModes;
  }

  public void setConnectorModes(@javax.annotation.Nullable List connectorModes) {
    this.connectorModes = connectorModes;
  }


  public DescribeConnectorResponseConnectorConfiguration authenticationConfig(@javax.annotation.Nullable ConnectorConfigurationAuthenticationConfig authenticationConfig) {
    this.authenticationConfig = authenticationConfig;
    return this;
  }

  /**
   * Get authenticationConfig
   * @return authenticationConfig
   */
  @javax.annotation.Nullable
  public ConnectorConfigurationAuthenticationConfig getAuthenticationConfig() {
    return authenticationConfig;
  }

  public void setAuthenticationConfig(@javax.annotation.Nullable ConnectorConfigurationAuthenticationConfig authenticationConfig) {
    this.authenticationConfig = authenticationConfig;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorRuntimeSettings(@javax.annotation.Nullable List connectorRuntimeSettings) {
    this.connectorRuntimeSettings = connectorRuntimeSettings;
    return this;
  }

  /**
   * Get connectorRuntimeSettings
   * @return connectorRuntimeSettings
   */
  @javax.annotation.Nullable
  public List getConnectorRuntimeSettings() {
    return connectorRuntimeSettings;
  }

  public void setConnectorRuntimeSettings(@javax.annotation.Nullable List connectorRuntimeSettings) {
    this.connectorRuntimeSettings = connectorRuntimeSettings;
  }


  public DescribeConnectorResponseConnectorConfiguration supportedApiVersions(@javax.annotation.Nullable List supportedApiVersions) {
    this.supportedApiVersions = supportedApiVersions;
    return this;
  }

  /**
   * Get supportedApiVersions
   * @return supportedApiVersions
   */
  @javax.annotation.Nullable
  public List getSupportedApiVersions() {
    return supportedApiVersions;
  }

  public void setSupportedApiVersions(@javax.annotation.Nullable List supportedApiVersions) {
    this.supportedApiVersions = supportedApiVersions;
  }


  public DescribeConnectorResponseConnectorConfiguration supportedOperators(@javax.annotation.Nullable List supportedOperators) {
    this.supportedOperators = supportedOperators;
    return this;
  }

  /**
   * Get supportedOperators
   * @return supportedOperators
   */
  @javax.annotation.Nullable
  public List getSupportedOperators() {
    return supportedOperators;
  }

  public void setSupportedOperators(@javax.annotation.Nullable List supportedOperators) {
    this.supportedOperators = supportedOperators;
  }


  public DescribeConnectorResponseConnectorConfiguration supportedWriteOperations(@javax.annotation.Nullable List supportedWriteOperations) {
    this.supportedWriteOperations = supportedWriteOperations;
    return this;
  }

  /**
   * Get supportedWriteOperations
   * @return supportedWriteOperations
   */
  @javax.annotation.Nullable
  public List getSupportedWriteOperations() {
    return supportedWriteOperations;
  }

  public void setSupportedWriteOperations(@javax.annotation.Nullable List supportedWriteOperations) {
    this.supportedWriteOperations = supportedWriteOperations;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorProvisioningType(@javax.annotation.Nullable ConnectorProvisioningType connectorProvisioningType) {
    this.connectorProvisioningType = connectorProvisioningType;
    return this;
  }

  /**
   * Get connectorProvisioningType
   * @return connectorProvisioningType
   */
  @javax.annotation.Nullable
  public ConnectorProvisioningType getConnectorProvisioningType() {
    return connectorProvisioningType;
  }

  public void setConnectorProvisioningType(@javax.annotation.Nullable ConnectorProvisioningType connectorProvisioningType) {
    this.connectorProvisioningType = connectorProvisioningType;
  }


  public DescribeConnectorResponseConnectorConfiguration connectorProvisioningConfig(@javax.annotation.Nullable ConnectorConfigurationConnectorProvisioningConfig connectorProvisioningConfig) {
    this.connectorProvisioningConfig = connectorProvisioningConfig;
    return this;
  }

  /**
   * Get connectorProvisioningConfig
   * @return connectorProvisioningConfig
   */
  @javax.annotation.Nullable
  public ConnectorConfigurationConnectorProvisioningConfig getConnectorProvisioningConfig() {
    return connectorProvisioningConfig;
  }

  public void setConnectorProvisioningConfig(@javax.annotation.Nullable ConnectorConfigurationConnectorProvisioningConfig connectorProvisioningConfig) {
    this.connectorProvisioningConfig = connectorProvisioningConfig;
  }


  public DescribeConnectorResponseConnectorConfiguration logoURL(@javax.annotation.Nullable String logoURL) {
    this.logoURL = logoURL;
    return this;
  }

  /**
   * Get logoURL
   * @return logoURL
   */
  @javax.annotation.Nullable
  public String getLogoURL() {
    return logoURL;
  }

  public void setLogoURL(@javax.annotation.Nullable String logoURL) {
    this.logoURL = logoURL;
  }


  public DescribeConnectorResponseConnectorConfiguration registeredAt(@javax.annotation.Nullable OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
    return this;
  }

  /**
   * Get registeredAt
   * @return registeredAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRegisteredAt() {
    return registeredAt;
  }

  public void setRegisteredAt(@javax.annotation.Nullable OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
  }


  public DescribeConnectorResponseConnectorConfiguration registeredBy(@javax.annotation.Nullable String registeredBy) {
    this.registeredBy = registeredBy;
    return this;
  }

  /**
   * Get registeredBy
   * @return registeredBy
   */
  @javax.annotation.Nullable
  public String getRegisteredBy() {
    return registeredBy;
  }

  public void setRegisteredBy(@javax.annotation.Nullable String registeredBy) {
    this.registeredBy = registeredBy;
  }


  public DescribeConnectorResponseConnectorConfiguration supportedDataTransferTypes(@javax.annotation.Nullable List supportedDataTransferTypes) {
    this.supportedDataTransferTypes = supportedDataTransferTypes;
    return this;
  }

  /**
   * Get supportedDataTransferTypes
   * @return supportedDataTransferTypes
   */
  @javax.annotation.Nullable
  public List getSupportedDataTransferTypes() {
    return supportedDataTransferTypes;
  }

  public void setSupportedDataTransferTypes(@javax.annotation.Nullable List supportedDataTransferTypes) {
    this.supportedDataTransferTypes = supportedDataTransferTypes;
  }


  public DescribeConnectorResponseConnectorConfiguration supportedDataTransferApis(@javax.annotation.Nullable List supportedDataTransferApis) {
    this.supportedDataTransferApis = supportedDataTransferApis;
    return this;
  }

  /**
   * Get supportedDataTransferApis
   * @return supportedDataTransferApis
   */
  @javax.annotation.Nullable
  public List getSupportedDataTransferApis() {
    return supportedDataTransferApis;
  }

  public void setSupportedDataTransferApis(@javax.annotation.Nullable List supportedDataTransferApis) {
    this.supportedDataTransferApis = supportedDataTransferApis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeConnectorResponseConnectorConfiguration describeConnectorResponseConnectorConfiguration = (DescribeConnectorResponseConnectorConfiguration) o;
    return Objects.equals(this.canUseAsSource, describeConnectorResponseConnectorConfiguration.canUseAsSource) &&
        Objects.equals(this.canUseAsDestination, describeConnectorResponseConnectorConfiguration.canUseAsDestination) &&
        Objects.equals(this.supportedDestinationConnectors, describeConnectorResponseConnectorConfiguration.supportedDestinationConnectors) &&
        Objects.equals(this.supportedSchedulingFrequencies, describeConnectorResponseConnectorConfiguration.supportedSchedulingFrequencies) &&
        Objects.equals(this.isPrivateLinkEnabled, describeConnectorResponseConnectorConfiguration.isPrivateLinkEnabled) &&
        Objects.equals(this.isPrivateLinkEndpointUrlRequired, describeConnectorResponseConnectorConfiguration.isPrivateLinkEndpointUrlRequired) &&
        Objects.equals(this.supportedTriggerTypes, describeConnectorResponseConnectorConfiguration.supportedTriggerTypes) &&
        Objects.equals(this.connectorMetadata, describeConnectorResponseConnectorConfiguration.connectorMetadata) &&
        Objects.equals(this.connectorType, describeConnectorResponseConnectorConfiguration.connectorType) &&
        Objects.equals(this.connectorLabel, describeConnectorResponseConnectorConfiguration.connectorLabel) &&
        Objects.equals(this.connectorDescription, describeConnectorResponseConnectorConfiguration.connectorDescription) &&
        Objects.equals(this.connectorOwner, describeConnectorResponseConnectorConfiguration.connectorOwner) &&
        Objects.equals(this.connectorName, describeConnectorResponseConnectorConfiguration.connectorName) &&
        Objects.equals(this.connectorVersion, describeConnectorResponseConnectorConfiguration.connectorVersion) &&
        Objects.equals(this.connectorArn, describeConnectorResponseConnectorConfiguration.connectorArn) &&
        Objects.equals(this.connectorModes, describeConnectorResponseConnectorConfiguration.connectorModes) &&
        Objects.equals(this.authenticationConfig, describeConnectorResponseConnectorConfiguration.authenticationConfig) &&
        Objects.equals(this.connectorRuntimeSettings, describeConnectorResponseConnectorConfiguration.connectorRuntimeSettings) &&
        Objects.equals(this.supportedApiVersions, describeConnectorResponseConnectorConfiguration.supportedApiVersions) &&
        Objects.equals(this.supportedOperators, describeConnectorResponseConnectorConfiguration.supportedOperators) &&
        Objects.equals(this.supportedWriteOperations, describeConnectorResponseConnectorConfiguration.supportedWriteOperations) &&
        Objects.equals(this.connectorProvisioningType, describeConnectorResponseConnectorConfiguration.connectorProvisioningType) &&
        Objects.equals(this.connectorProvisioningConfig, describeConnectorResponseConnectorConfiguration.connectorProvisioningConfig) &&
        Objects.equals(this.logoURL, describeConnectorResponseConnectorConfiguration.logoURL) &&
        Objects.equals(this.registeredAt, describeConnectorResponseConnectorConfiguration.registeredAt) &&
        Objects.equals(this.registeredBy, describeConnectorResponseConnectorConfiguration.registeredBy) &&
        Objects.equals(this.supportedDataTransferTypes, describeConnectorResponseConnectorConfiguration.supportedDataTransferTypes) &&
        Objects.equals(this.supportedDataTransferApis, describeConnectorResponseConnectorConfiguration.supportedDataTransferApis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canUseAsSource, canUseAsDestination, supportedDestinationConnectors, supportedSchedulingFrequencies, isPrivateLinkEnabled, isPrivateLinkEndpointUrlRequired, supportedTriggerTypes, connectorMetadata, connectorType, connectorLabel, connectorDescription, connectorOwner, connectorName, connectorVersion, connectorArn, connectorModes, authenticationConfig, connectorRuntimeSettings, supportedApiVersions, supportedOperators, supportedWriteOperations, connectorProvisioningType, connectorProvisioningConfig, logoURL, registeredAt, registeredBy, supportedDataTransferTypes, supportedDataTransferApis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeConnectorResponseConnectorConfiguration {\n");
    sb.append("    canUseAsSource: ").append(toIndentedString(canUseAsSource)).append("\n");
    sb.append("    canUseAsDestination: ").append(toIndentedString(canUseAsDestination)).append("\n");
    sb.append("    supportedDestinationConnectors: ").append(toIndentedString(supportedDestinationConnectors)).append("\n");
    sb.append("    supportedSchedulingFrequencies: ").append(toIndentedString(supportedSchedulingFrequencies)).append("\n");
    sb.append("    isPrivateLinkEnabled: ").append(toIndentedString(isPrivateLinkEnabled)).append("\n");
    sb.append("    isPrivateLinkEndpointUrlRequired: ").append(toIndentedString(isPrivateLinkEndpointUrlRequired)).append("\n");
    sb.append("    supportedTriggerTypes: ").append(toIndentedString(supportedTriggerTypes)).append("\n");
    sb.append("    connectorMetadata: ").append(toIndentedString(connectorMetadata)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    connectorLabel: ").append(toIndentedString(connectorLabel)).append("\n");
    sb.append("    connectorDescription: ").append(toIndentedString(connectorDescription)).append("\n");
    sb.append("    connectorOwner: ").append(toIndentedString(connectorOwner)).append("\n");
    sb.append("    connectorName: ").append(toIndentedString(connectorName)).append("\n");
    sb.append("    connectorVersion: ").append(toIndentedString(connectorVersion)).append("\n");
    sb.append("    connectorArn: ").append(toIndentedString(connectorArn)).append("\n");
    sb.append("    connectorModes: ").append(toIndentedString(connectorModes)).append("\n");
    sb.append("    authenticationConfig: ").append(toIndentedString(authenticationConfig)).append("\n");
    sb.append("    connectorRuntimeSettings: ").append(toIndentedString(connectorRuntimeSettings)).append("\n");
    sb.append("    supportedApiVersions: ").append(toIndentedString(supportedApiVersions)).append("\n");
    sb.append("    supportedOperators: ").append(toIndentedString(supportedOperators)).append("\n");
    sb.append("    supportedWriteOperations: ").append(toIndentedString(supportedWriteOperations)).append("\n");
    sb.append("    connectorProvisioningType: ").append(toIndentedString(connectorProvisioningType)).append("\n");
    sb.append("    connectorProvisioningConfig: ").append(toIndentedString(connectorProvisioningConfig)).append("\n");
    sb.append("    logoURL: ").append(toIndentedString(logoURL)).append("\n");
    sb.append("    registeredAt: ").append(toIndentedString(registeredAt)).append("\n");
    sb.append("    registeredBy: ").append(toIndentedString(registeredBy)).append("\n");
    sb.append("    supportedDataTransferTypes: ").append(toIndentedString(supportedDataTransferTypes)).append("\n");
    sb.append("    supportedDataTransferApis: ").append(toIndentedString(supportedDataTransferApis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canUseAsSource");
    openapiFields.add("canUseAsDestination");
    openapiFields.add("supportedDestinationConnectors");
    openapiFields.add("supportedSchedulingFrequencies");
    openapiFields.add("isPrivateLinkEnabled");
    openapiFields.add("isPrivateLinkEndpointUrlRequired");
    openapiFields.add("supportedTriggerTypes");
    openapiFields.add("connectorMetadata");
    openapiFields.add("connectorType");
    openapiFields.add("connectorLabel");
    openapiFields.add("connectorDescription");
    openapiFields.add("connectorOwner");
    openapiFields.add("connectorName");
    openapiFields.add("connectorVersion");
    openapiFields.add("connectorArn");
    openapiFields.add("connectorModes");
    openapiFields.add("authenticationConfig");
    openapiFields.add("connectorRuntimeSettings");
    openapiFields.add("supportedApiVersions");
    openapiFields.add("supportedOperators");
    openapiFields.add("supportedWriteOperations");
    openapiFields.add("connectorProvisioningType");
    openapiFields.add("connectorProvisioningConfig");
    openapiFields.add("logoURL");
    openapiFields.add("registeredAt");
    openapiFields.add("registeredBy");
    openapiFields.add("supportedDataTransferTypes");
    openapiFields.add("supportedDataTransferApis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeConnectorResponseConnectorConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeConnectorResponseConnectorConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeConnectorResponseConnectorConfiguration is not found in the empty JSON string", DescribeConnectorResponseConnectorConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeConnectorResponseConnectorConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeConnectorResponseConnectorConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `canUseAsSource`
      if (jsonObj.get("canUseAsSource") != null && !jsonObj.get("canUseAsSource").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("canUseAsSource"));
      }
      // validate the optional field `canUseAsDestination`
      if (jsonObj.get("canUseAsDestination") != null && !jsonObj.get("canUseAsDestination").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("canUseAsDestination"));
      }
      // validate the optional field `supportedDestinationConnectors`
      if (jsonObj.get("supportedDestinationConnectors") != null && !jsonObj.get("supportedDestinationConnectors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("supportedDestinationConnectors"));
      }
      // validate the optional field `supportedSchedulingFrequencies`
      if (jsonObj.get("supportedSchedulingFrequencies") != null && !jsonObj.get("supportedSchedulingFrequencies").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("supportedSchedulingFrequencies"));
      }
      // validate the optional field `isPrivateLinkEnabled`
      if (jsonObj.get("isPrivateLinkEnabled") != null && !jsonObj.get("isPrivateLinkEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isPrivateLinkEnabled"));
      }
      // validate the optional field `isPrivateLinkEndpointUrlRequired`
      if (jsonObj.get("isPrivateLinkEndpointUrlRequired") != null && !jsonObj.get("isPrivateLinkEndpointUrlRequired").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isPrivateLinkEndpointUrlRequired"));
      }
      // validate the optional field `supportedTriggerTypes`
      if (jsonObj.get("supportedTriggerTypes") != null && !jsonObj.get("supportedTriggerTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("supportedTriggerTypes"));
      }
      // validate the optional field `connectorMetadata`
      if (jsonObj.get("connectorMetadata") != null && !jsonObj.get("connectorMetadata").isJsonNull()) {
        ConnectorConfigurationConnectorMetadata.validateJsonElement(jsonObj.get("connectorMetadata"));
      }
      // validate the optional field `connectorType`
      if (jsonObj.get("connectorType") != null && !jsonObj.get("connectorType").isJsonNull()) {
        ConnectorType.validateJsonElement(jsonObj.get("connectorType"));
      }
      // validate the optional field `connectorLabel`
      if (jsonObj.get("connectorLabel") != null && !jsonObj.get("connectorLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorLabel"));
      }
      // validate the optional field `connectorDescription`
      if (jsonObj.get("connectorDescription") != null && !jsonObj.get("connectorDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorDescription"));
      }
      // validate the optional field `connectorOwner`
      if (jsonObj.get("connectorOwner") != null && !jsonObj.get("connectorOwner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorOwner"));
      }
      // validate the optional field `connectorName`
      if (jsonObj.get("connectorName") != null && !jsonObj.get("connectorName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorName"));
      }
      // validate the optional field `connectorVersion`
      if (jsonObj.get("connectorVersion") != null && !jsonObj.get("connectorVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorVersion"));
      }
      // validate the optional field `connectorArn`
      if (jsonObj.get("connectorArn") != null && !jsonObj.get("connectorArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorArn"));
      }
      // validate the optional field `connectorModes`
      if (jsonObj.get("connectorModes") != null && !jsonObj.get("connectorModes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("connectorModes"));
      }
      // validate the optional field `authenticationConfig`
      if (jsonObj.get("authenticationConfig") != null && !jsonObj.get("authenticationConfig").isJsonNull()) {
        ConnectorConfigurationAuthenticationConfig.validateJsonElement(jsonObj.get("authenticationConfig"));
      }
      // validate the optional field `connectorRuntimeSettings`
      if (jsonObj.get("connectorRuntimeSettings") != null && !jsonObj.get("connectorRuntimeSettings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("connectorRuntimeSettings"));
      }
      // validate the optional field `supportedApiVersions`
      if (jsonObj.get("supportedApiVersions") != null && !jsonObj.get("supportedApiVersions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("supportedApiVersions"));
      }
      // validate the optional field `supportedOperators`
      if (jsonObj.get("supportedOperators") != null && !jsonObj.get("supportedOperators").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("supportedOperators"));
      }
      // validate the optional field `supportedWriteOperations`
      if (jsonObj.get("supportedWriteOperations") != null && !jsonObj.get("supportedWriteOperations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("supportedWriteOperations"));
      }
      // validate the optional field `connectorProvisioningType`
      if (jsonObj.get("connectorProvisioningType") != null && !jsonObj.get("connectorProvisioningType").isJsonNull()) {
        ConnectorProvisioningType.validateJsonElement(jsonObj.get("connectorProvisioningType"));
      }
      // validate the optional field `connectorProvisioningConfig`
      if (jsonObj.get("connectorProvisioningConfig") != null && !jsonObj.get("connectorProvisioningConfig").isJsonNull()) {
        ConnectorConfigurationConnectorProvisioningConfig.validateJsonElement(jsonObj.get("connectorProvisioningConfig"));
      }
      // validate the optional field `logoURL`
      if (jsonObj.get("logoURL") != null && !jsonObj.get("logoURL").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logoURL"));
      }
      // validate the optional field `registeredAt`
      if (jsonObj.get("registeredAt") != null && !jsonObj.get("registeredAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("registeredAt"));
      }
      // validate the optional field `registeredBy`
      if (jsonObj.get("registeredBy") != null && !jsonObj.get("registeredBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registeredBy"));
      }
      // validate the optional field `supportedDataTransferTypes`
      if (jsonObj.get("supportedDataTransferTypes") != null && !jsonObj.get("supportedDataTransferTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("supportedDataTransferTypes"));
      }
      // validate the optional field `supportedDataTransferApis`
      if (jsonObj.get("supportedDataTransferApis") != null && !jsonObj.get("supportedDataTransferApis").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("supportedDataTransferApis"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeConnectorResponseConnectorConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeConnectorResponseConnectorConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeConnectorResponseConnectorConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeConnectorResponseConnectorConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeConnectorResponseConnectorConfiguration>() {
           @Override
           public void write(JsonWriter out, DescribeConnectorResponseConnectorConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeConnectorResponseConnectorConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeConnectorResponseConnectorConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeConnectorResponseConnectorConfiguration
   * @throws IOException if the JSON string is invalid with respect to DescribeConnectorResponseConnectorConfiguration
   */
  public static DescribeConnectorResponseConnectorConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeConnectorResponseConnectorConfiguration.class);
  }

  /**
   * Convert an instance of DescribeConnectorResponseConnectorConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

