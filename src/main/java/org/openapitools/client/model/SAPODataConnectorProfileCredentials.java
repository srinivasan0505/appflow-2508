/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SAPODataConnectorProfileCredentialsBasicAuthCredentials;
import org.openapitools.client.model.SAPODataConnectorProfileCredentialsOAuthCredentials;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The connector-specific profile credentials required when using SAPOData. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class SAPODataConnectorProfileCredentials {
  public static final String SERIALIZED_NAME_BASIC_AUTH_CREDENTIALS = "basicAuthCredentials";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_CREDENTIALS)
  @javax.annotation.Nullable
  private SAPODataConnectorProfileCredentialsBasicAuthCredentials basicAuthCredentials;

  public static final String SERIALIZED_NAME_O_AUTH_CREDENTIALS = "oAuthCredentials";
  @SerializedName(SERIALIZED_NAME_O_AUTH_CREDENTIALS)
  @javax.annotation.Nullable
  private SAPODataConnectorProfileCredentialsOAuthCredentials oAuthCredentials;

  public SAPODataConnectorProfileCredentials() {
  }

  public SAPODataConnectorProfileCredentials basicAuthCredentials(@javax.annotation.Nullable SAPODataConnectorProfileCredentialsBasicAuthCredentials basicAuthCredentials) {
    this.basicAuthCredentials = basicAuthCredentials;
    return this;
  }

  /**
   * Get basicAuthCredentials
   * @return basicAuthCredentials
   */
  @javax.annotation.Nullable
  public SAPODataConnectorProfileCredentialsBasicAuthCredentials getBasicAuthCredentials() {
    return basicAuthCredentials;
  }

  public void setBasicAuthCredentials(@javax.annotation.Nullable SAPODataConnectorProfileCredentialsBasicAuthCredentials basicAuthCredentials) {
    this.basicAuthCredentials = basicAuthCredentials;
  }


  public SAPODataConnectorProfileCredentials oAuthCredentials(@javax.annotation.Nullable SAPODataConnectorProfileCredentialsOAuthCredentials oAuthCredentials) {
    this.oAuthCredentials = oAuthCredentials;
    return this;
  }

  /**
   * Get oAuthCredentials
   * @return oAuthCredentials
   */
  @javax.annotation.Nullable
  public SAPODataConnectorProfileCredentialsOAuthCredentials getoAuthCredentials() {
    return oAuthCredentials;
  }

  public void setoAuthCredentials(@javax.annotation.Nullable SAPODataConnectorProfileCredentialsOAuthCredentials oAuthCredentials) {
    this.oAuthCredentials = oAuthCredentials;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SAPODataConnectorProfileCredentials saPODataConnectorProfileCredentials = (SAPODataConnectorProfileCredentials) o;
    return Objects.equals(this.basicAuthCredentials, saPODataConnectorProfileCredentials.basicAuthCredentials) &&
        Objects.equals(this.oAuthCredentials, saPODataConnectorProfileCredentials.oAuthCredentials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basicAuthCredentials, oAuthCredentials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SAPODataConnectorProfileCredentials {\n");
    sb.append("    basicAuthCredentials: ").append(toIndentedString(basicAuthCredentials)).append("\n");
    sb.append("    oAuthCredentials: ").append(toIndentedString(oAuthCredentials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basicAuthCredentials");
    openapiFields.add("oAuthCredentials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SAPODataConnectorProfileCredentials
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SAPODataConnectorProfileCredentials.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SAPODataConnectorProfileCredentials is not found in the empty JSON string", SAPODataConnectorProfileCredentials.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SAPODataConnectorProfileCredentials.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SAPODataConnectorProfileCredentials` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `basicAuthCredentials`
      if (jsonObj.get("basicAuthCredentials") != null && !jsonObj.get("basicAuthCredentials").isJsonNull()) {
        SAPODataConnectorProfileCredentialsBasicAuthCredentials.validateJsonElement(jsonObj.get("basicAuthCredentials"));
      }
      // validate the optional field `oAuthCredentials`
      if (jsonObj.get("oAuthCredentials") != null && !jsonObj.get("oAuthCredentials").isJsonNull()) {
        SAPODataConnectorProfileCredentialsOAuthCredentials.validateJsonElement(jsonObj.get("oAuthCredentials"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SAPODataConnectorProfileCredentials.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SAPODataConnectorProfileCredentials' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SAPODataConnectorProfileCredentials> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SAPODataConnectorProfileCredentials.class));

       return (TypeAdapter<T>) new TypeAdapter<SAPODataConnectorProfileCredentials>() {
           @Override
           public void write(JsonWriter out, SAPODataConnectorProfileCredentials value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SAPODataConnectorProfileCredentials read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SAPODataConnectorProfileCredentials given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SAPODataConnectorProfileCredentials
   * @throws IOException if the JSON string is invalid with respect to SAPODataConnectorProfileCredentials
   */
  public static SAPODataConnectorProfileCredentials fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SAPODataConnectorProfileCredentials.class);
  }

  /**
   * Convert an instance of SAPODataConnectorProfileCredentials to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

