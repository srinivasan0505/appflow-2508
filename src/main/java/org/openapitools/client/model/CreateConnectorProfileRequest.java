/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateConnectorProfileRequestConnectorProfileConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateConnectorProfileRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class CreateConnectorProfileRequest {
  public static final String SERIALIZED_NAME_CONNECTOR_PROFILE_NAME = "connectorProfileName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROFILE_NAME)
  @javax.annotation.Nonnull
  private String connectorProfileName;

  public static final String SERIALIZED_NAME_KMS_ARN = "kmsArn";
  @SerializedName(SERIALIZED_NAME_KMS_ARN)
  @javax.annotation.Nullable
  private String kmsArn;

  /**
   *  The type of connector, such as Salesforce, Amplitude, and so on. 
   */
  @JsonAdapter(ConnectorTypeEnum.Adapter.class)
  public enum ConnectorTypeEnum {
    SALESFORCE("Salesforce"),
    
    SINGULAR("Singular"),
    
    SLACK("Slack"),
    
    REDSHIFT("Redshift"),
    
    S3("S3"),
    
    MARKETO("Marketo"),
    
    GOOGLEANALYTICS("Googleanalytics"),
    
    ZENDESK("Zendesk"),
    
    SERVICENOW("Servicenow"),
    
    DATADOG("Datadog"),
    
    TRENDMICRO("Trendmicro"),
    
    SNOWFLAKE("Snowflake"),
    
    DYNATRACE("Dynatrace"),
    
    INFORNEXUS("Infornexus"),
    
    AMPLITUDE("Amplitude"),
    
    VEEVA("Veeva"),
    
    EVENT_BRIDGE("EventBridge"),
    
    LOOKOUT_METRICS("LookoutMetrics"),
    
    UPSOLVER("Upsolver"),
    
    HONEYCODE("Honeycode"),
    
    CUSTOMER_PROFILES("CustomerProfiles"),
    
    SAPO_DATA("SAPOData"),
    
    CUSTOM_CONNECTOR("CustomConnector"),
    
    PARDOT("Pardot");

    private String value;

    ConnectorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectorTypeEnum fromValue(String value) {
      for (ConnectorTypeEnum b : ConnectorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  @javax.annotation.Nonnull
  private ConnectorTypeEnum connectorType;

  public static final String SERIALIZED_NAME_CONNECTOR_LABEL = "connectorLabel";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_LABEL)
  @javax.annotation.Nullable
  private String connectorLabel;

  /**
   *  Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. 
   */
  @JsonAdapter(ConnectionModeEnum.Adapter.class)
  public enum ConnectionModeEnum {
    PUBLIC("Public"),
    
    PRIVATE("Private");

    private String value;

    ConnectionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionModeEnum fromValue(String value) {
      for (ConnectionModeEnum b : ConnectionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_MODE = "connectionMode";
  @SerializedName(SERIALIZED_NAME_CONNECTION_MODE)
  @javax.annotation.Nonnull
  private ConnectionModeEnum connectionMode;

  public static final String SERIALIZED_NAME_CONNECTOR_PROFILE_CONFIG = "connectorProfileConfig";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROFILE_CONFIG)
  @javax.annotation.Nonnull
  private CreateConnectorProfileRequestConnectorProfileConfig connectorProfileConfig;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  @javax.annotation.Nullable
  private String clientToken;

  public CreateConnectorProfileRequest() {
  }

  public CreateConnectorProfileRequest connectorProfileName(@javax.annotation.Nonnull String connectorProfileName) {
    this.connectorProfileName = connectorProfileName;
    return this;
  }

  /**
   *  The name of the connector profile. The name is unique for each &lt;code&gt;ConnectorProfile&lt;/code&gt; in your Amazon Web Services account. 
   * @return connectorProfileName
   */
  @javax.annotation.Nonnull
  public String getConnectorProfileName() {
    return connectorProfileName;
  }

  public void setConnectorProfileName(@javax.annotation.Nonnull String connectorProfileName) {
    this.connectorProfileName = connectorProfileName;
  }


  public CreateConnectorProfileRequest kmsArn(@javax.annotation.Nullable String kmsArn) {
    this.kmsArn = kmsArn;
    return this;
  }

  /**
   *  The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don&#39;t provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. 
   * @return kmsArn
   */
  @javax.annotation.Nullable
  public String getKmsArn() {
    return kmsArn;
  }

  public void setKmsArn(@javax.annotation.Nullable String kmsArn) {
    this.kmsArn = kmsArn;
  }


  public CreateConnectorProfileRequest connectorType(@javax.annotation.Nonnull ConnectorTypeEnum connectorType) {
    this.connectorType = connectorType;
    return this;
  }

  /**
   *  The type of connector, such as Salesforce, Amplitude, and so on. 
   * @return connectorType
   */
  @javax.annotation.Nonnull
  public ConnectorTypeEnum getConnectorType() {
    return connectorType;
  }

  public void setConnectorType(@javax.annotation.Nonnull ConnectorTypeEnum connectorType) {
    this.connectorType = connectorType;
  }


  public CreateConnectorProfileRequest connectorLabel(@javax.annotation.Nullable String connectorLabel) {
    this.connectorLabel = connectorLabel;
    return this;
  }

  /**
   * The label of the connector. The label is unique for each &lt;code&gt;ConnectorRegistration&lt;/code&gt; in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.
   * @return connectorLabel
   */
  @javax.annotation.Nullable
  public String getConnectorLabel() {
    return connectorLabel;
  }

  public void setConnectorLabel(@javax.annotation.Nullable String connectorLabel) {
    this.connectorLabel = connectorLabel;
  }


  public CreateConnectorProfileRequest connectionMode(@javax.annotation.Nonnull ConnectionModeEnum connectionMode) {
    this.connectionMode = connectionMode;
    return this;
  }

  /**
   *  Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. 
   * @return connectionMode
   */
  @javax.annotation.Nonnull
  public ConnectionModeEnum getConnectionMode() {
    return connectionMode;
  }

  public void setConnectionMode(@javax.annotation.Nonnull ConnectionModeEnum connectionMode) {
    this.connectionMode = connectionMode;
  }


  public CreateConnectorProfileRequest connectorProfileConfig(@javax.annotation.Nonnull CreateConnectorProfileRequestConnectorProfileConfig connectorProfileConfig) {
    this.connectorProfileConfig = connectorProfileConfig;
    return this;
  }

  /**
   * Get connectorProfileConfig
   * @return connectorProfileConfig
   */
  @javax.annotation.Nonnull
  public CreateConnectorProfileRequestConnectorProfileConfig getConnectorProfileConfig() {
    return connectorProfileConfig;
  }

  public void setConnectorProfileConfig(@javax.annotation.Nonnull CreateConnectorProfileRequestConnectorProfileConfig connectorProfileConfig) {
    this.connectorProfileConfig = connectorProfileConfig;
  }


  public CreateConnectorProfileRequest clientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * &lt;p&gt;The &lt;code&gt;clientToken&lt;/code&gt; parameter is an idempotency token. It ensures that your &lt;code&gt;CreateConnectorProfile&lt;/code&gt; request completes only once. You choose the value to pass. For example, if you don&#39;t receive a response from your request, you can safely retry the request with the same &lt;code&gt;clientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you omit a &lt;code&gt;clientToken&lt;/code&gt; value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.&lt;/p&gt; &lt;p&gt;If you specify input parameters that differ from your first request, an error occurs. If you use a different value for &lt;code&gt;clientToken&lt;/code&gt;, Amazon AppFlow considers it a new call to &lt;code&gt;CreateConnectorProfile&lt;/code&gt;. The token is active for 8 hours.&lt;/p&gt;
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConnectorProfileRequest createConnectorProfileRequest = (CreateConnectorProfileRequest) o;
    return Objects.equals(this.connectorProfileName, createConnectorProfileRequest.connectorProfileName) &&
        Objects.equals(this.kmsArn, createConnectorProfileRequest.kmsArn) &&
        Objects.equals(this.connectorType, createConnectorProfileRequest.connectorType) &&
        Objects.equals(this.connectorLabel, createConnectorProfileRequest.connectorLabel) &&
        Objects.equals(this.connectionMode, createConnectorProfileRequest.connectionMode) &&
        Objects.equals(this.connectorProfileConfig, createConnectorProfileRequest.connectorProfileConfig) &&
        Objects.equals(this.clientToken, createConnectorProfileRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorProfileName, kmsArn, connectorType, connectorLabel, connectionMode, connectorProfileConfig, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConnectorProfileRequest {\n");
    sb.append("    connectorProfileName: ").append(toIndentedString(connectorProfileName)).append("\n");
    sb.append("    kmsArn: ").append(toIndentedString(kmsArn)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    connectorLabel: ").append(toIndentedString(connectorLabel)).append("\n");
    sb.append("    connectionMode: ").append(toIndentedString(connectionMode)).append("\n");
    sb.append("    connectorProfileConfig: ").append(toIndentedString(connectorProfileConfig)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorProfileName");
    openapiFields.add("kmsArn");
    openapiFields.add("connectorType");
    openapiFields.add("connectorLabel");
    openapiFields.add("connectionMode");
    openapiFields.add("connectorProfileConfig");
    openapiFields.add("clientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectorProfileName");
    openapiRequiredFields.add("connectorType");
    openapiRequiredFields.add("connectionMode");
    openapiRequiredFields.add("connectorProfileConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConnectorProfileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConnectorProfileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConnectorProfileRequest is not found in the empty JSON string", CreateConnectorProfileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConnectorProfileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConnectorProfileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConnectorProfileRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connectorProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorProfileName").toString()));
      }
      if ((jsonObj.get("kmsArn") != null && !jsonObj.get("kmsArn").isJsonNull()) && !jsonObj.get("kmsArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsArn").toString()));
      }
      if (!jsonObj.get("connectorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorType").toString()));
      }
      // validate the required field `connectorType`
      ConnectorTypeEnum.validateJsonElement(jsonObj.get("connectorType"));
      if ((jsonObj.get("connectorLabel") != null && !jsonObj.get("connectorLabel").isJsonNull()) && !jsonObj.get("connectorLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorLabel").toString()));
      }
      if (!jsonObj.get("connectionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionMode").toString()));
      }
      // validate the required field `connectionMode`
      ConnectionModeEnum.validateJsonElement(jsonObj.get("connectionMode"));
      // validate the required field `connectorProfileConfig`
      CreateConnectorProfileRequestConnectorProfileConfig.validateJsonElement(jsonObj.get("connectorProfileConfig"));
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConnectorProfileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConnectorProfileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConnectorProfileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConnectorProfileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConnectorProfileRequest>() {
           @Override
           public void write(JsonWriter out, CreateConnectorProfileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConnectorProfileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConnectorProfileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConnectorProfileRequest
   * @throws IOException if the JSON string is invalid with respect to CreateConnectorProfileRequest
   */
  public static CreateConnectorProfileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConnectorProfileRequest.class);
  }

  /**
   * Convert an instance of CreateConnectorProfileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

