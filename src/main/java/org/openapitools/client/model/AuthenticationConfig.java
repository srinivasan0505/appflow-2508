/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthenticationConfigOAuth2Defaults;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the authentication config that the connector supports.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class AuthenticationConfig {
  public static final String SERIALIZED_NAME_IS_BASIC_AUTH_SUPPORTED = "isBasicAuthSupported";
  @SerializedName(SERIALIZED_NAME_IS_BASIC_AUTH_SUPPORTED)
  @javax.annotation.Nullable
  private Boolean isBasicAuthSupported;

  public static final String SERIALIZED_NAME_IS_API_KEY_AUTH_SUPPORTED = "isApiKeyAuthSupported";
  @SerializedName(SERIALIZED_NAME_IS_API_KEY_AUTH_SUPPORTED)
  @javax.annotation.Nullable
  private Boolean isApiKeyAuthSupported;

  public static final String SERIALIZED_NAME_IS_O_AUTH2_SUPPORTED = "isOAuth2Supported";
  @SerializedName(SERIALIZED_NAME_IS_O_AUTH2_SUPPORTED)
  @javax.annotation.Nullable
  private Boolean isOAuth2Supported;

  public static final String SERIALIZED_NAME_IS_CUSTOM_AUTH_SUPPORTED = "isCustomAuthSupported";
  @SerializedName(SERIALIZED_NAME_IS_CUSTOM_AUTH_SUPPORTED)
  @javax.annotation.Nullable
  private Boolean isCustomAuthSupported;

  public static final String SERIALIZED_NAME_O_AUTH2_DEFAULTS = "oAuth2Defaults";
  @SerializedName(SERIALIZED_NAME_O_AUTH2_DEFAULTS)
  @javax.annotation.Nullable
  private AuthenticationConfigOAuth2Defaults oAuth2Defaults;

  public static final String SERIALIZED_NAME_CUSTOM_AUTH_CONFIGS = "customAuthConfigs";
  @SerializedName(SERIALIZED_NAME_CUSTOM_AUTH_CONFIGS)
  @javax.annotation.Nullable
  private List customAuthConfigs;

  public AuthenticationConfig() {
  }

  public AuthenticationConfig isBasicAuthSupported(@javax.annotation.Nullable Boolean isBasicAuthSupported) {
    this.isBasicAuthSupported = isBasicAuthSupported;
    return this;
  }

  /**
   * Get isBasicAuthSupported
   * @return isBasicAuthSupported
   */
  @javax.annotation.Nullable
  public Boolean getIsBasicAuthSupported() {
    return isBasicAuthSupported;
  }

  public void setIsBasicAuthSupported(@javax.annotation.Nullable Boolean isBasicAuthSupported) {
    this.isBasicAuthSupported = isBasicAuthSupported;
  }


  public AuthenticationConfig isApiKeyAuthSupported(@javax.annotation.Nullable Boolean isApiKeyAuthSupported) {
    this.isApiKeyAuthSupported = isApiKeyAuthSupported;
    return this;
  }

  /**
   * Get isApiKeyAuthSupported
   * @return isApiKeyAuthSupported
   */
  @javax.annotation.Nullable
  public Boolean getIsApiKeyAuthSupported() {
    return isApiKeyAuthSupported;
  }

  public void setIsApiKeyAuthSupported(@javax.annotation.Nullable Boolean isApiKeyAuthSupported) {
    this.isApiKeyAuthSupported = isApiKeyAuthSupported;
  }


  public AuthenticationConfig isOAuth2Supported(@javax.annotation.Nullable Boolean isOAuth2Supported) {
    this.isOAuth2Supported = isOAuth2Supported;
    return this;
  }

  /**
   * Get isOAuth2Supported
   * @return isOAuth2Supported
   */
  @javax.annotation.Nullable
  public Boolean getIsOAuth2Supported() {
    return isOAuth2Supported;
  }

  public void setIsOAuth2Supported(@javax.annotation.Nullable Boolean isOAuth2Supported) {
    this.isOAuth2Supported = isOAuth2Supported;
  }


  public AuthenticationConfig isCustomAuthSupported(@javax.annotation.Nullable Boolean isCustomAuthSupported) {
    this.isCustomAuthSupported = isCustomAuthSupported;
    return this;
  }

  /**
   * Get isCustomAuthSupported
   * @return isCustomAuthSupported
   */
  @javax.annotation.Nullable
  public Boolean getIsCustomAuthSupported() {
    return isCustomAuthSupported;
  }

  public void setIsCustomAuthSupported(@javax.annotation.Nullable Boolean isCustomAuthSupported) {
    this.isCustomAuthSupported = isCustomAuthSupported;
  }


  public AuthenticationConfig oAuth2Defaults(@javax.annotation.Nullable AuthenticationConfigOAuth2Defaults oAuth2Defaults) {
    this.oAuth2Defaults = oAuth2Defaults;
    return this;
  }

  /**
   * Get oAuth2Defaults
   * @return oAuth2Defaults
   */
  @javax.annotation.Nullable
  public AuthenticationConfigOAuth2Defaults getoAuth2Defaults() {
    return oAuth2Defaults;
  }

  public void setoAuth2Defaults(@javax.annotation.Nullable AuthenticationConfigOAuth2Defaults oAuth2Defaults) {
    this.oAuth2Defaults = oAuth2Defaults;
  }


  public AuthenticationConfig customAuthConfigs(@javax.annotation.Nullable List customAuthConfigs) {
    this.customAuthConfigs = customAuthConfigs;
    return this;
  }

  /**
   * Get customAuthConfigs
   * @return customAuthConfigs
   */
  @javax.annotation.Nullable
  public List getCustomAuthConfigs() {
    return customAuthConfigs;
  }

  public void setCustomAuthConfigs(@javax.annotation.Nullable List customAuthConfigs) {
    this.customAuthConfigs = customAuthConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationConfig authenticationConfig = (AuthenticationConfig) o;
    return Objects.equals(this.isBasicAuthSupported, authenticationConfig.isBasicAuthSupported) &&
        Objects.equals(this.isApiKeyAuthSupported, authenticationConfig.isApiKeyAuthSupported) &&
        Objects.equals(this.isOAuth2Supported, authenticationConfig.isOAuth2Supported) &&
        Objects.equals(this.isCustomAuthSupported, authenticationConfig.isCustomAuthSupported) &&
        Objects.equals(this.oAuth2Defaults, authenticationConfig.oAuth2Defaults) &&
        Objects.equals(this.customAuthConfigs, authenticationConfig.customAuthConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isBasicAuthSupported, isApiKeyAuthSupported, isOAuth2Supported, isCustomAuthSupported, oAuth2Defaults, customAuthConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationConfig {\n");
    sb.append("    isBasicAuthSupported: ").append(toIndentedString(isBasicAuthSupported)).append("\n");
    sb.append("    isApiKeyAuthSupported: ").append(toIndentedString(isApiKeyAuthSupported)).append("\n");
    sb.append("    isOAuth2Supported: ").append(toIndentedString(isOAuth2Supported)).append("\n");
    sb.append("    isCustomAuthSupported: ").append(toIndentedString(isCustomAuthSupported)).append("\n");
    sb.append("    oAuth2Defaults: ").append(toIndentedString(oAuth2Defaults)).append("\n");
    sb.append("    customAuthConfigs: ").append(toIndentedString(customAuthConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isBasicAuthSupported");
    openapiFields.add("isApiKeyAuthSupported");
    openapiFields.add("isOAuth2Supported");
    openapiFields.add("isCustomAuthSupported");
    openapiFields.add("oAuth2Defaults");
    openapiFields.add("customAuthConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthenticationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthenticationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticationConfig is not found in the empty JSON string", AuthenticationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthenticationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthenticationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `isBasicAuthSupported`
      if (jsonObj.get("isBasicAuthSupported") != null && !jsonObj.get("isBasicAuthSupported").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isBasicAuthSupported"));
      }
      // validate the optional field `isApiKeyAuthSupported`
      if (jsonObj.get("isApiKeyAuthSupported") != null && !jsonObj.get("isApiKeyAuthSupported").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isApiKeyAuthSupported"));
      }
      // validate the optional field `isOAuth2Supported`
      if (jsonObj.get("isOAuth2Supported") != null && !jsonObj.get("isOAuth2Supported").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isOAuth2Supported"));
      }
      // validate the optional field `isCustomAuthSupported`
      if (jsonObj.get("isCustomAuthSupported") != null && !jsonObj.get("isCustomAuthSupported").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isCustomAuthSupported"));
      }
      // validate the optional field `oAuth2Defaults`
      if (jsonObj.get("oAuth2Defaults") != null && !jsonObj.get("oAuth2Defaults").isJsonNull()) {
        AuthenticationConfigOAuth2Defaults.validateJsonElement(jsonObj.get("oAuth2Defaults"));
      }
      // validate the optional field `customAuthConfigs`
      if (jsonObj.get("customAuthConfigs") != null && !jsonObj.get("customAuthConfigs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("customAuthConfigs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticationConfig>() {
           @Override
           public void write(JsonWriter out, AuthenticationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthenticationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthenticationConfig
   * @throws IOException if the JSON string is invalid with respect to AuthenticationConfig
   */
  public static AuthenticationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticationConfig.class);
  }

  /**
   * Convert an instance of AuthenticationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

