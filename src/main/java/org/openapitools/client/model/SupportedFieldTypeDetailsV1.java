/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FieldTypeDetailsFieldLengthRange;
import org.openapitools.client.model.FieldTypeDetailsFieldValueRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SupportedFieldTypeDetailsV1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class SupportedFieldTypeDetailsV1 {
  public static final String SERIALIZED_NAME_FIELD_TYPE = "fieldType";
  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  @javax.annotation.Nonnull
  private String fieldType;

  public static final String SERIALIZED_NAME_FILTER_OPERATORS = "filterOperators";
  @SerializedName(SERIALIZED_NAME_FILTER_OPERATORS)
  @javax.annotation.Nonnull
  private List filterOperators;

  public static final String SERIALIZED_NAME_SUPPORTED_VALUES = "supportedValues";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_VALUES)
  @javax.annotation.Nullable
  private List supportedValues;

  public static final String SERIALIZED_NAME_VALUE_REGEX_PATTERN = "valueRegexPattern";
  @SerializedName(SERIALIZED_NAME_VALUE_REGEX_PATTERN)
  @javax.annotation.Nullable
  private String valueRegexPattern;

  public static final String SERIALIZED_NAME_SUPPORTED_DATE_FORMAT = "supportedDateFormat";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_DATE_FORMAT)
  @javax.annotation.Nullable
  private String supportedDateFormat;

  public static final String SERIALIZED_NAME_FIELD_VALUE_RANGE = "fieldValueRange";
  @SerializedName(SERIALIZED_NAME_FIELD_VALUE_RANGE)
  @javax.annotation.Nullable
  private FieldTypeDetailsFieldValueRange fieldValueRange;

  public static final String SERIALIZED_NAME_FIELD_LENGTH_RANGE = "fieldLengthRange";
  @SerializedName(SERIALIZED_NAME_FIELD_LENGTH_RANGE)
  @javax.annotation.Nullable
  private FieldTypeDetailsFieldLengthRange fieldLengthRange;

  public SupportedFieldTypeDetailsV1() {
  }

  public SupportedFieldTypeDetailsV1 fieldType(@javax.annotation.Nonnull String fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Get fieldType
   * @return fieldType
   */
  @javax.annotation.Nonnull
  public String getFieldType() {
    return fieldType;
  }

  public void setFieldType(@javax.annotation.Nonnull String fieldType) {
    this.fieldType = fieldType;
  }


  public SupportedFieldTypeDetailsV1 filterOperators(@javax.annotation.Nonnull List filterOperators) {
    this.filterOperators = filterOperators;
    return this;
  }

  /**
   * Get filterOperators
   * @return filterOperators
   */
  @javax.annotation.Nonnull
  public List getFilterOperators() {
    return filterOperators;
  }

  public void setFilterOperators(@javax.annotation.Nonnull List filterOperators) {
    this.filterOperators = filterOperators;
  }


  public SupportedFieldTypeDetailsV1 supportedValues(@javax.annotation.Nullable List supportedValues) {
    this.supportedValues = supportedValues;
    return this;
  }

  /**
   * Get supportedValues
   * @return supportedValues
   */
  @javax.annotation.Nullable
  public List getSupportedValues() {
    return supportedValues;
  }

  public void setSupportedValues(@javax.annotation.Nullable List supportedValues) {
    this.supportedValues = supportedValues;
  }


  public SupportedFieldTypeDetailsV1 valueRegexPattern(@javax.annotation.Nullable String valueRegexPattern) {
    this.valueRegexPattern = valueRegexPattern;
    return this;
  }

  /**
   * Get valueRegexPattern
   * @return valueRegexPattern
   */
  @javax.annotation.Nullable
  public String getValueRegexPattern() {
    return valueRegexPattern;
  }

  public void setValueRegexPattern(@javax.annotation.Nullable String valueRegexPattern) {
    this.valueRegexPattern = valueRegexPattern;
  }


  public SupportedFieldTypeDetailsV1 supportedDateFormat(@javax.annotation.Nullable String supportedDateFormat) {
    this.supportedDateFormat = supportedDateFormat;
    return this;
  }

  /**
   * Get supportedDateFormat
   * @return supportedDateFormat
   */
  @javax.annotation.Nullable
  public String getSupportedDateFormat() {
    return supportedDateFormat;
  }

  public void setSupportedDateFormat(@javax.annotation.Nullable String supportedDateFormat) {
    this.supportedDateFormat = supportedDateFormat;
  }


  public SupportedFieldTypeDetailsV1 fieldValueRange(@javax.annotation.Nullable FieldTypeDetailsFieldValueRange fieldValueRange) {
    this.fieldValueRange = fieldValueRange;
    return this;
  }

  /**
   * Get fieldValueRange
   * @return fieldValueRange
   */
  @javax.annotation.Nullable
  public FieldTypeDetailsFieldValueRange getFieldValueRange() {
    return fieldValueRange;
  }

  public void setFieldValueRange(@javax.annotation.Nullable FieldTypeDetailsFieldValueRange fieldValueRange) {
    this.fieldValueRange = fieldValueRange;
  }


  public SupportedFieldTypeDetailsV1 fieldLengthRange(@javax.annotation.Nullable FieldTypeDetailsFieldLengthRange fieldLengthRange) {
    this.fieldLengthRange = fieldLengthRange;
    return this;
  }

  /**
   * Get fieldLengthRange
   * @return fieldLengthRange
   */
  @javax.annotation.Nullable
  public FieldTypeDetailsFieldLengthRange getFieldLengthRange() {
    return fieldLengthRange;
  }

  public void setFieldLengthRange(@javax.annotation.Nullable FieldTypeDetailsFieldLengthRange fieldLengthRange) {
    this.fieldLengthRange = fieldLengthRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportedFieldTypeDetailsV1 supportedFieldTypeDetailsV1 = (SupportedFieldTypeDetailsV1) o;
    return Objects.equals(this.fieldType, supportedFieldTypeDetailsV1.fieldType) &&
        Objects.equals(this.filterOperators, supportedFieldTypeDetailsV1.filterOperators) &&
        Objects.equals(this.supportedValues, supportedFieldTypeDetailsV1.supportedValues) &&
        Objects.equals(this.valueRegexPattern, supportedFieldTypeDetailsV1.valueRegexPattern) &&
        Objects.equals(this.supportedDateFormat, supportedFieldTypeDetailsV1.supportedDateFormat) &&
        Objects.equals(this.fieldValueRange, supportedFieldTypeDetailsV1.fieldValueRange) &&
        Objects.equals(this.fieldLengthRange, supportedFieldTypeDetailsV1.fieldLengthRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldType, filterOperators, supportedValues, valueRegexPattern, supportedDateFormat, fieldValueRange, fieldLengthRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportedFieldTypeDetailsV1 {\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    filterOperators: ").append(toIndentedString(filterOperators)).append("\n");
    sb.append("    supportedValues: ").append(toIndentedString(supportedValues)).append("\n");
    sb.append("    valueRegexPattern: ").append(toIndentedString(valueRegexPattern)).append("\n");
    sb.append("    supportedDateFormat: ").append(toIndentedString(supportedDateFormat)).append("\n");
    sb.append("    fieldValueRange: ").append(toIndentedString(fieldValueRange)).append("\n");
    sb.append("    fieldLengthRange: ").append(toIndentedString(fieldLengthRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fieldType");
    openapiFields.add("filterOperators");
    openapiFields.add("supportedValues");
    openapiFields.add("valueRegexPattern");
    openapiFields.add("supportedDateFormat");
    openapiFields.add("fieldValueRange");
    openapiFields.add("fieldLengthRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldType");
    openapiRequiredFields.add("filterOperators");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SupportedFieldTypeDetailsV1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SupportedFieldTypeDetailsV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SupportedFieldTypeDetailsV1 is not found in the empty JSON string", SupportedFieldTypeDetailsV1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SupportedFieldTypeDetailsV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SupportedFieldTypeDetailsV1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SupportedFieldTypeDetailsV1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `fieldType`
      String.validateJsonElement(jsonObj.get("fieldType"));
      // validate the required field `filterOperators`
      List.validateJsonElement(jsonObj.get("filterOperators"));
      // validate the optional field `supportedValues`
      if (jsonObj.get("supportedValues") != null && !jsonObj.get("supportedValues").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("supportedValues"));
      }
      // validate the optional field `valueRegexPattern`
      if (jsonObj.get("valueRegexPattern") != null && !jsonObj.get("valueRegexPattern").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("valueRegexPattern"));
      }
      // validate the optional field `supportedDateFormat`
      if (jsonObj.get("supportedDateFormat") != null && !jsonObj.get("supportedDateFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("supportedDateFormat"));
      }
      // validate the optional field `fieldValueRange`
      if (jsonObj.get("fieldValueRange") != null && !jsonObj.get("fieldValueRange").isJsonNull()) {
        FieldTypeDetailsFieldValueRange.validateJsonElement(jsonObj.get("fieldValueRange"));
      }
      // validate the optional field `fieldLengthRange`
      if (jsonObj.get("fieldLengthRange") != null && !jsonObj.get("fieldLengthRange").isJsonNull()) {
        FieldTypeDetailsFieldLengthRange.validateJsonElement(jsonObj.get("fieldLengthRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SupportedFieldTypeDetailsV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SupportedFieldTypeDetailsV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SupportedFieldTypeDetailsV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SupportedFieldTypeDetailsV1.class));

       return (TypeAdapter<T>) new TypeAdapter<SupportedFieldTypeDetailsV1>() {
           @Override
           public void write(JsonWriter out, SupportedFieldTypeDetailsV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SupportedFieldTypeDetailsV1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SupportedFieldTypeDetailsV1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SupportedFieldTypeDetailsV1
   * @throws IOException if the JSON string is invalid with respect to SupportedFieldTypeDetailsV1
   */
  public static SupportedFieldTypeDetailsV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SupportedFieldTypeDetailsV1.class);
  }

  /**
   * Convert an instance of SupportedFieldTypeDetailsV1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

