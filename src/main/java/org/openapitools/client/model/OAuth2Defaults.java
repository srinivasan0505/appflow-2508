/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the default values required for OAuth 2.0 authentication.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class OAuth2Defaults {
  public static final String SERIALIZED_NAME_OAUTH_SCOPES = "oauthScopes";
  @SerializedName(SERIALIZED_NAME_OAUTH_SCOPES)
  @javax.annotation.Nullable
  private List oauthScopes;

  public static final String SERIALIZED_NAME_TOKEN_URLS = "tokenUrls";
  @SerializedName(SERIALIZED_NAME_TOKEN_URLS)
  @javax.annotation.Nullable
  private List tokenUrls;

  public static final String SERIALIZED_NAME_AUTH_CODE_URLS = "authCodeUrls";
  @SerializedName(SERIALIZED_NAME_AUTH_CODE_URLS)
  @javax.annotation.Nullable
  private List authCodeUrls;

  public static final String SERIALIZED_NAME_OAUTH2_GRANT_TYPES_SUPPORTED = "oauth2GrantTypesSupported";
  @SerializedName(SERIALIZED_NAME_OAUTH2_GRANT_TYPES_SUPPORTED)
  @javax.annotation.Nullable
  private List oauth2GrantTypesSupported;

  public static final String SERIALIZED_NAME_OAUTH2_CUSTOM_PROPERTIES = "oauth2CustomProperties";
  @SerializedName(SERIALIZED_NAME_OAUTH2_CUSTOM_PROPERTIES)
  @javax.annotation.Nullable
  private List oauth2CustomProperties;

  public OAuth2Defaults() {
  }

  public OAuth2Defaults oauthScopes(@javax.annotation.Nullable List oauthScopes) {
    this.oauthScopes = oauthScopes;
    return this;
  }

  /**
   * Get oauthScopes
   * @return oauthScopes
   */
  @javax.annotation.Nullable
  public List getOauthScopes() {
    return oauthScopes;
  }

  public void setOauthScopes(@javax.annotation.Nullable List oauthScopes) {
    this.oauthScopes = oauthScopes;
  }


  public OAuth2Defaults tokenUrls(@javax.annotation.Nullable List tokenUrls) {
    this.tokenUrls = tokenUrls;
    return this;
  }

  /**
   * Get tokenUrls
   * @return tokenUrls
   */
  @javax.annotation.Nullable
  public List getTokenUrls() {
    return tokenUrls;
  }

  public void setTokenUrls(@javax.annotation.Nullable List tokenUrls) {
    this.tokenUrls = tokenUrls;
  }


  public OAuth2Defaults authCodeUrls(@javax.annotation.Nullable List authCodeUrls) {
    this.authCodeUrls = authCodeUrls;
    return this;
  }

  /**
   * Get authCodeUrls
   * @return authCodeUrls
   */
  @javax.annotation.Nullable
  public List getAuthCodeUrls() {
    return authCodeUrls;
  }

  public void setAuthCodeUrls(@javax.annotation.Nullable List authCodeUrls) {
    this.authCodeUrls = authCodeUrls;
  }


  public OAuth2Defaults oauth2GrantTypesSupported(@javax.annotation.Nullable List oauth2GrantTypesSupported) {
    this.oauth2GrantTypesSupported = oauth2GrantTypesSupported;
    return this;
  }

  /**
   * Get oauth2GrantTypesSupported
   * @return oauth2GrantTypesSupported
   */
  @javax.annotation.Nullable
  public List getOauth2GrantTypesSupported() {
    return oauth2GrantTypesSupported;
  }

  public void setOauth2GrantTypesSupported(@javax.annotation.Nullable List oauth2GrantTypesSupported) {
    this.oauth2GrantTypesSupported = oauth2GrantTypesSupported;
  }


  public OAuth2Defaults oauth2CustomProperties(@javax.annotation.Nullable List oauth2CustomProperties) {
    this.oauth2CustomProperties = oauth2CustomProperties;
    return this;
  }

  /**
   * Get oauth2CustomProperties
   * @return oauth2CustomProperties
   */
  @javax.annotation.Nullable
  public List getOauth2CustomProperties() {
    return oauth2CustomProperties;
  }

  public void setOauth2CustomProperties(@javax.annotation.Nullable List oauth2CustomProperties) {
    this.oauth2CustomProperties = oauth2CustomProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2Defaults oauth2Defaults = (OAuth2Defaults) o;
    return Objects.equals(this.oauthScopes, oauth2Defaults.oauthScopes) &&
        Objects.equals(this.tokenUrls, oauth2Defaults.tokenUrls) &&
        Objects.equals(this.authCodeUrls, oauth2Defaults.authCodeUrls) &&
        Objects.equals(this.oauth2GrantTypesSupported, oauth2Defaults.oauth2GrantTypesSupported) &&
        Objects.equals(this.oauth2CustomProperties, oauth2Defaults.oauth2CustomProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oauthScopes, tokenUrls, authCodeUrls, oauth2GrantTypesSupported, oauth2CustomProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2Defaults {\n");
    sb.append("    oauthScopes: ").append(toIndentedString(oauthScopes)).append("\n");
    sb.append("    tokenUrls: ").append(toIndentedString(tokenUrls)).append("\n");
    sb.append("    authCodeUrls: ").append(toIndentedString(authCodeUrls)).append("\n");
    sb.append("    oauth2GrantTypesSupported: ").append(toIndentedString(oauth2GrantTypesSupported)).append("\n");
    sb.append("    oauth2CustomProperties: ").append(toIndentedString(oauth2CustomProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("oauthScopes");
    openapiFields.add("tokenUrls");
    openapiFields.add("authCodeUrls");
    openapiFields.add("oauth2GrantTypesSupported");
    openapiFields.add("oauth2CustomProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OAuth2Defaults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OAuth2Defaults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuth2Defaults is not found in the empty JSON string", OAuth2Defaults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OAuth2Defaults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuth2Defaults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `oauthScopes`
      if (jsonObj.get("oauthScopes") != null && !jsonObj.get("oauthScopes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("oauthScopes"));
      }
      // validate the optional field `tokenUrls`
      if (jsonObj.get("tokenUrls") != null && !jsonObj.get("tokenUrls").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tokenUrls"));
      }
      // validate the optional field `authCodeUrls`
      if (jsonObj.get("authCodeUrls") != null && !jsonObj.get("authCodeUrls").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("authCodeUrls"));
      }
      // validate the optional field `oauth2GrantTypesSupported`
      if (jsonObj.get("oauth2GrantTypesSupported") != null && !jsonObj.get("oauth2GrantTypesSupported").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("oauth2GrantTypesSupported"));
      }
      // validate the optional field `oauth2CustomProperties`
      if (jsonObj.get("oauth2CustomProperties") != null && !jsonObj.get("oauth2CustomProperties").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("oauth2CustomProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuth2Defaults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuth2Defaults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuth2Defaults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuth2Defaults.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuth2Defaults>() {
           @Override
           public void write(JsonWriter out, OAuth2Defaults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuth2Defaults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OAuth2Defaults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OAuth2Defaults
   * @throws IOException if the JSON string is invalid with respect to OAuth2Defaults
   */
  public static OAuth2Defaults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuth2Defaults.class);
  }

  /**
   * Convert an instance of OAuth2Defaults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

