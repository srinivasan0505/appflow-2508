/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets OperatorPropertiesKeys
 */
@JsonAdapter(OperatorPropertiesKeys.Adapter.class)
public enum OperatorPropertiesKeys {
  
  VALUE("VALUE"),
  
  VALUES("VALUES"),
  
  DATA_TYPE("DATA_TYPE"),
  
  UPPER_BOUND("UPPER_BOUND"),
  
  LOWER_BOUND("LOWER_BOUND"),
  
  SOURCE_DATA_TYPE("SOURCE_DATA_TYPE"),
  
  DESTINATION_DATA_TYPE("DESTINATION_DATA_TYPE"),
  
  VALIDATION_ACTION("VALIDATION_ACTION"),
  
  MASK_VALUE("MASK_VALUE"),
  
  MASK_LENGTH("MASK_LENGTH"),
  
  TRUNCATE_LENGTH("TRUNCATE_LENGTH"),
  
  MATH_OPERATION_FIELDS_ORDER("MATH_OPERATION_FIELDS_ORDER"),
  
  CONCAT_FORMAT("CONCAT_FORMAT"),
  
  SUBFIELD_CATEGORY_MAP("SUBFIELD_CATEGORY_MAP"),
  
  EXCLUDE_SOURCE_FIELDS_LIST("EXCLUDE_SOURCE_FIELDS_LIST"),
  
  INCLUDE_NEW_FIELDS("INCLUDE_NEW_FIELDS"),
  
  ORDERED_PARTITION_KEYS_LIST("ORDERED_PARTITION_KEYS_LIST");

  private String value;

  OperatorPropertiesKeys(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static OperatorPropertiesKeys fromValue(String value) {
    for (OperatorPropertiesKeys b : OperatorPropertiesKeys.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<OperatorPropertiesKeys> {
    @Override
    public void write(final JsonWriter jsonWriter, final OperatorPropertiesKeys enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public OperatorPropertiesKeys read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return OperatorPropertiesKeys.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    OperatorPropertiesKeys.fromValue(value);
  }
}

