/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConnectorProvisioningType;
import org.openapitools.client.model.ConnectorType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the registered connector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:27.578242+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class ConnectorDetail {
  public static final String SERIALIZED_NAME_CONNECTOR_DESCRIPTION = "connectorDescription";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_DESCRIPTION)
  @javax.annotation.Nullable
  private String connectorDescription;

  public static final String SERIALIZED_NAME_CONNECTOR_NAME = "connectorName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_NAME)
  @javax.annotation.Nullable
  private String connectorName;

  public static final String SERIALIZED_NAME_CONNECTOR_OWNER = "connectorOwner";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_OWNER)
  @javax.annotation.Nullable
  private String connectorOwner;

  public static final String SERIALIZED_NAME_CONNECTOR_VERSION = "connectorVersion";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_VERSION)
  @javax.annotation.Nullable
  private String connectorVersion;

  public static final String SERIALIZED_NAME_APPLICATION_TYPE = "applicationType";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE)
  @javax.annotation.Nullable
  private String applicationType;

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  @javax.annotation.Nullable
  private ConnectorType connectorType;

  public static final String SERIALIZED_NAME_CONNECTOR_LABEL = "connectorLabel";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_LABEL)
  @javax.annotation.Nullable
  private String connectorLabel;

  public static final String SERIALIZED_NAME_REGISTERED_AT = "registeredAt";
  @SerializedName(SERIALIZED_NAME_REGISTERED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime registeredAt;

  public static final String SERIALIZED_NAME_REGISTERED_BY = "registeredBy";
  @SerializedName(SERIALIZED_NAME_REGISTERED_BY)
  @javax.annotation.Nullable
  private String registeredBy;

  public static final String SERIALIZED_NAME_CONNECTOR_PROVISIONING_TYPE = "connectorProvisioningType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROVISIONING_TYPE)
  @javax.annotation.Nullable
  private ConnectorProvisioningType connectorProvisioningType;

  public static final String SERIALIZED_NAME_CONNECTOR_MODES = "connectorModes";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_MODES)
  @javax.annotation.Nullable
  private List connectorModes;

  public static final String SERIALIZED_NAME_SUPPORTED_DATA_TRANSFER_TYPES = "supportedDataTransferTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_DATA_TRANSFER_TYPES)
  @javax.annotation.Nullable
  private List supportedDataTransferTypes;

  public ConnectorDetail() {
  }

  public ConnectorDetail connectorDescription(@javax.annotation.Nullable String connectorDescription) {
    this.connectorDescription = connectorDescription;
    return this;
  }

  /**
   * Get connectorDescription
   * @return connectorDescription
   */
  @javax.annotation.Nullable
  public String getConnectorDescription() {
    return connectorDescription;
  }

  public void setConnectorDescription(@javax.annotation.Nullable String connectorDescription) {
    this.connectorDescription = connectorDescription;
  }


  public ConnectorDetail connectorName(@javax.annotation.Nullable String connectorName) {
    this.connectorName = connectorName;
    return this;
  }

  /**
   * Get connectorName
   * @return connectorName
   */
  @javax.annotation.Nullable
  public String getConnectorName() {
    return connectorName;
  }

  public void setConnectorName(@javax.annotation.Nullable String connectorName) {
    this.connectorName = connectorName;
  }


  public ConnectorDetail connectorOwner(@javax.annotation.Nullable String connectorOwner) {
    this.connectorOwner = connectorOwner;
    return this;
  }

  /**
   * Get connectorOwner
   * @return connectorOwner
   */
  @javax.annotation.Nullable
  public String getConnectorOwner() {
    return connectorOwner;
  }

  public void setConnectorOwner(@javax.annotation.Nullable String connectorOwner) {
    this.connectorOwner = connectorOwner;
  }


  public ConnectorDetail connectorVersion(@javax.annotation.Nullable String connectorVersion) {
    this.connectorVersion = connectorVersion;
    return this;
  }

  /**
   * Get connectorVersion
   * @return connectorVersion
   */
  @javax.annotation.Nullable
  public String getConnectorVersion() {
    return connectorVersion;
  }

  public void setConnectorVersion(@javax.annotation.Nullable String connectorVersion) {
    this.connectorVersion = connectorVersion;
  }


  public ConnectorDetail applicationType(@javax.annotation.Nullable String applicationType) {
    this.applicationType = applicationType;
    return this;
  }

  /**
   * Get applicationType
   * @return applicationType
   */
  @javax.annotation.Nullable
  public String getApplicationType() {
    return applicationType;
  }

  public void setApplicationType(@javax.annotation.Nullable String applicationType) {
    this.applicationType = applicationType;
  }


  public ConnectorDetail connectorType(@javax.annotation.Nullable ConnectorType connectorType) {
    this.connectorType = connectorType;
    return this;
  }

  /**
   * Get connectorType
   * @return connectorType
   */
  @javax.annotation.Nullable
  public ConnectorType getConnectorType() {
    return connectorType;
  }

  public void setConnectorType(@javax.annotation.Nullable ConnectorType connectorType) {
    this.connectorType = connectorType;
  }


  public ConnectorDetail connectorLabel(@javax.annotation.Nullable String connectorLabel) {
    this.connectorLabel = connectorLabel;
    return this;
  }

  /**
   * Get connectorLabel
   * @return connectorLabel
   */
  @javax.annotation.Nullable
  public String getConnectorLabel() {
    return connectorLabel;
  }

  public void setConnectorLabel(@javax.annotation.Nullable String connectorLabel) {
    this.connectorLabel = connectorLabel;
  }


  public ConnectorDetail registeredAt(@javax.annotation.Nullable OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
    return this;
  }

  /**
   * Get registeredAt
   * @return registeredAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRegisteredAt() {
    return registeredAt;
  }

  public void setRegisteredAt(@javax.annotation.Nullable OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
  }


  public ConnectorDetail registeredBy(@javax.annotation.Nullable String registeredBy) {
    this.registeredBy = registeredBy;
    return this;
  }

  /**
   * Get registeredBy
   * @return registeredBy
   */
  @javax.annotation.Nullable
  public String getRegisteredBy() {
    return registeredBy;
  }

  public void setRegisteredBy(@javax.annotation.Nullable String registeredBy) {
    this.registeredBy = registeredBy;
  }


  public ConnectorDetail connectorProvisioningType(@javax.annotation.Nullable ConnectorProvisioningType connectorProvisioningType) {
    this.connectorProvisioningType = connectorProvisioningType;
    return this;
  }

  /**
   * Get connectorProvisioningType
   * @return connectorProvisioningType
   */
  @javax.annotation.Nullable
  public ConnectorProvisioningType getConnectorProvisioningType() {
    return connectorProvisioningType;
  }

  public void setConnectorProvisioningType(@javax.annotation.Nullable ConnectorProvisioningType connectorProvisioningType) {
    this.connectorProvisioningType = connectorProvisioningType;
  }


  public ConnectorDetail connectorModes(@javax.annotation.Nullable List connectorModes) {
    this.connectorModes = connectorModes;
    return this;
  }

  /**
   * Get connectorModes
   * @return connectorModes
   */
  @javax.annotation.Nullable
  public List getConnectorModes() {
    return connectorModes;
  }

  public void setConnectorModes(@javax.annotation.Nullable List connectorModes) {
    this.connectorModes = connectorModes;
  }


  public ConnectorDetail supportedDataTransferTypes(@javax.annotation.Nullable List supportedDataTransferTypes) {
    this.supportedDataTransferTypes = supportedDataTransferTypes;
    return this;
  }

  /**
   * Get supportedDataTransferTypes
   * @return supportedDataTransferTypes
   */
  @javax.annotation.Nullable
  public List getSupportedDataTransferTypes() {
    return supportedDataTransferTypes;
  }

  public void setSupportedDataTransferTypes(@javax.annotation.Nullable List supportedDataTransferTypes) {
    this.supportedDataTransferTypes = supportedDataTransferTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorDetail connectorDetail = (ConnectorDetail) o;
    return Objects.equals(this.connectorDescription, connectorDetail.connectorDescription) &&
        Objects.equals(this.connectorName, connectorDetail.connectorName) &&
        Objects.equals(this.connectorOwner, connectorDetail.connectorOwner) &&
        Objects.equals(this.connectorVersion, connectorDetail.connectorVersion) &&
        Objects.equals(this.applicationType, connectorDetail.applicationType) &&
        Objects.equals(this.connectorType, connectorDetail.connectorType) &&
        Objects.equals(this.connectorLabel, connectorDetail.connectorLabel) &&
        Objects.equals(this.registeredAt, connectorDetail.registeredAt) &&
        Objects.equals(this.registeredBy, connectorDetail.registeredBy) &&
        Objects.equals(this.connectorProvisioningType, connectorDetail.connectorProvisioningType) &&
        Objects.equals(this.connectorModes, connectorDetail.connectorModes) &&
        Objects.equals(this.supportedDataTransferTypes, connectorDetail.supportedDataTransferTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorDescription, connectorName, connectorOwner, connectorVersion, applicationType, connectorType, connectorLabel, registeredAt, registeredBy, connectorProvisioningType, connectorModes, supportedDataTransferTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorDetail {\n");
    sb.append("    connectorDescription: ").append(toIndentedString(connectorDescription)).append("\n");
    sb.append("    connectorName: ").append(toIndentedString(connectorName)).append("\n");
    sb.append("    connectorOwner: ").append(toIndentedString(connectorOwner)).append("\n");
    sb.append("    connectorVersion: ").append(toIndentedString(connectorVersion)).append("\n");
    sb.append("    applicationType: ").append(toIndentedString(applicationType)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    connectorLabel: ").append(toIndentedString(connectorLabel)).append("\n");
    sb.append("    registeredAt: ").append(toIndentedString(registeredAt)).append("\n");
    sb.append("    registeredBy: ").append(toIndentedString(registeredBy)).append("\n");
    sb.append("    connectorProvisioningType: ").append(toIndentedString(connectorProvisioningType)).append("\n");
    sb.append("    connectorModes: ").append(toIndentedString(connectorModes)).append("\n");
    sb.append("    supportedDataTransferTypes: ").append(toIndentedString(supportedDataTransferTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorDescription");
    openapiFields.add("connectorName");
    openapiFields.add("connectorOwner");
    openapiFields.add("connectorVersion");
    openapiFields.add("applicationType");
    openapiFields.add("connectorType");
    openapiFields.add("connectorLabel");
    openapiFields.add("registeredAt");
    openapiFields.add("registeredBy");
    openapiFields.add("connectorProvisioningType");
    openapiFields.add("connectorModes");
    openapiFields.add("supportedDataTransferTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorDetail is not found in the empty JSON string", ConnectorDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connectorDescription`
      if (jsonObj.get("connectorDescription") != null && !jsonObj.get("connectorDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorDescription"));
      }
      // validate the optional field `connectorName`
      if (jsonObj.get("connectorName") != null && !jsonObj.get("connectorName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorName"));
      }
      // validate the optional field `connectorOwner`
      if (jsonObj.get("connectorOwner") != null && !jsonObj.get("connectorOwner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorOwner"));
      }
      // validate the optional field `connectorVersion`
      if (jsonObj.get("connectorVersion") != null && !jsonObj.get("connectorVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorVersion"));
      }
      // validate the optional field `applicationType`
      if (jsonObj.get("applicationType") != null && !jsonObj.get("applicationType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("applicationType"));
      }
      // validate the optional field `connectorType`
      if (jsonObj.get("connectorType") != null && !jsonObj.get("connectorType").isJsonNull()) {
        ConnectorType.validateJsonElement(jsonObj.get("connectorType"));
      }
      // validate the optional field `connectorLabel`
      if (jsonObj.get("connectorLabel") != null && !jsonObj.get("connectorLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorLabel"));
      }
      // validate the optional field `registeredAt`
      if (jsonObj.get("registeredAt") != null && !jsonObj.get("registeredAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("registeredAt"));
      }
      // validate the optional field `registeredBy`
      if (jsonObj.get("registeredBy") != null && !jsonObj.get("registeredBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registeredBy"));
      }
      // validate the optional field `connectorProvisioningType`
      if (jsonObj.get("connectorProvisioningType") != null && !jsonObj.get("connectorProvisioningType").isJsonNull()) {
        ConnectorProvisioningType.validateJsonElement(jsonObj.get("connectorProvisioningType"));
      }
      // validate the optional field `connectorModes`
      if (jsonObj.get("connectorModes") != null && !jsonObj.get("connectorModes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("connectorModes"));
      }
      // validate the optional field `supportedDataTransferTypes`
      if (jsonObj.get("supportedDataTransferTypes") != null && !jsonObj.get("supportedDataTransferTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("supportedDataTransferTypes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorDetail>() {
           @Override
           public void write(JsonWriter out, ConnectorDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorDetail
   * @throws IOException if the JSON string is invalid with respect to ConnectorDetail
   */
  public static ConnectorDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorDetail.class);
  }

  /**
   * Convert an instance of ConnectorDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

