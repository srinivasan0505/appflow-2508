/*
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelFlowExecutionsRequest;
import org.openapitools.client.model.CancelFlowExecutionsResponse;
import org.openapitools.client.model.CreateConnectorProfileRequest;
import org.openapitools.client.model.CreateConnectorProfileResponse;
import org.openapitools.client.model.CreateFlowRequest;
import org.openapitools.client.model.CreateFlowResponse;
import org.openapitools.client.model.DeleteConnectorProfileRequest;
import org.openapitools.client.model.DeleteFlowRequest;
import org.openapitools.client.model.DescribeConnectorEntityRequest;
import org.openapitools.client.model.DescribeConnectorEntityResponse;
import org.openapitools.client.model.DescribeConnectorProfilesRequest;
import org.openapitools.client.model.DescribeConnectorProfilesResponse;
import org.openapitools.client.model.DescribeConnectorRequest;
import org.openapitools.client.model.DescribeConnectorResponse;
import org.openapitools.client.model.DescribeConnectorsRequest;
import org.openapitools.client.model.DescribeConnectorsResponse;
import org.openapitools.client.model.DescribeFlowExecutionRecordsRequest;
import org.openapitools.client.model.DescribeFlowExecutionRecordsResponse;
import org.openapitools.client.model.DescribeFlowRequest;
import org.openapitools.client.model.DescribeFlowResponse;
import org.openapitools.client.model.ListConnectorEntitiesRequest;
import org.openapitools.client.model.ListConnectorEntitiesResponse;
import org.openapitools.client.model.ListConnectorsRequest;
import org.openapitools.client.model.ListConnectorsResponse;
import org.openapitools.client.model.ListFlowsRequest;
import org.openapitools.client.model.ListFlowsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.RegisterConnectorRequest;
import org.openapitools.client.model.RegisterConnectorResponse;
import org.openapitools.client.model.ResetConnectorMetadataCacheRequest;
import org.openapitools.client.model.StartFlowRequest;
import org.openapitools.client.model.StartFlowResponse;
import org.openapitools.client.model.StopFlowResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UnregisterConnectorRequest;
import org.openapitools.client.model.UpdateConnectorProfileRequest;
import org.openapitools.client.model.UpdateConnectorProfileResponse;
import org.openapitools.client.model.UpdateConnectorRegistrationRequest;
import org.openapitools.client.model.UpdateConnectorRegistrationResponse;
import org.openapitools.client.model.UpdateFlowRequest;
import org.openapitools.client.model.UpdateFlowResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Cancels active runs for a flow.&lt;/p&gt; &lt;p&gt;You can cancel all of the active runs for a flow, or you can cancel specific runs by providing their IDs.&lt;/p&gt; &lt;p&gt;You can cancel a flow run only when the run is in progress. You can&#39;t cancel a run that has already completed or failed. You also can&#39;t cancel a run that&#39;s scheduled to occur but hasn&#39;t started yet. To prevent a scheduled run, you can deactivate the flow with the &lt;code&gt;StopFlow&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt;You cannot resume a run after you cancel it.&lt;/p&gt; &lt;p&gt;When you send your request, the status for each run becomes &lt;code&gt;CancelStarted&lt;/code&gt;. When the cancellation completes, the status becomes &lt;code&gt;Canceled&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you cancel a run, you still incur charges for any data that the run already processed before the cancellation. If the run had already written some data to the flow destination, then that data remains in the destination. If you configured the flow to use a batch API (such as the Salesforce Bulk API 2.0), then the run will finish reading or writing its entire batch of data after the cancellation. For these operations, the data processing charges for Amazon AppFlow apply. For the pricing information, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/appflow/pricing/\&quot;&gt;Amazon AppFlow pricing&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelFlowExecutionsTest() throws ApiException {
        CancelFlowExecutionsRequest cancelFlowExecutionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelFlowExecutionsResponse response = api.cancelFlowExecutions(cancelFlowExecutionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Creates a new connector profile associated with your Amazon Web Services account. There is a soft quota of 100 connector profiles per Amazon Web Services account. If you need more connector profiles than this quota allows, you can submit a request to the Amazon AppFlow team through the Amazon AppFlow support channel. In each connector profile that you create, you can provide the credentials and properties for only one connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectorProfileTest() throws ApiException {
        CreateConnectorProfileRequest createConnectorProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConnectorProfileResponse response = api.createConnectorProfile(createConnectorProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Enables your application to create a new flow using Amazon AppFlow. You must create a connector profile before calling this API. Please note that the Request Syntax below shows syntax for multiple destinations, however, you can only transfer data to one item in this list at a time. Amazon AppFlow does not currently support flows to multiple destinations at once. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFlowTest() throws ApiException {
        CreateFlowRequest createFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFlowResponse response = api.createFlow(createFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Enables you to delete an existing connector profile. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectorProfileTest() throws ApiException {
        DeleteConnectorProfileRequest deleteConnectorProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteConnectorProfile(deleteConnectorProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Enables your application to delete an existing flow. Before deleting the flow, Amazon AppFlow validates the request by checking the flow configuration and status. You can delete flows one at a time. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFlowTest() throws ApiException {
        DeleteFlowRequest deleteFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteFlow(deleteFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the given custom connector registered in your Amazon Web Services account. This API can be used for custom connectors that are registered in your account and also for Amazon authored connectors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConnectorTest() throws ApiException {
        DescribeConnectorRequest describeConnectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConnectorResponse response = api.describeConnector(describeConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Provides details regarding the entity used with the connector, with a description of the data model for each field in that entity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConnectorEntityTest() throws ApiException {
        DescribeConnectorEntityRequest describeConnectorEntityRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConnectorEntityResponse response = api.describeConnectorEntity(describeConnectorEntityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Returns a list of &lt;code&gt;connector-profile&lt;/code&gt; details matching the provided &lt;code&gt;connector-profile&lt;/code&gt; names and &lt;code&gt;connector-types&lt;/code&gt;. Both input lists are optional, and you can use them to filter the result. &lt;/p&gt; &lt;p&gt;If no names or &lt;code&gt;connector-types&lt;/code&gt; are provided, returns all connector profiles in a paginated form. If there is no match, this operation returns an empty list.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConnectorProfilesTest() throws ApiException {
        DescribeConnectorProfilesRequest describeConnectorProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeConnectorProfilesResponse response = api.describeConnectorProfiles(describeConnectorProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Describes the connectors vended by Amazon AppFlow for specified connector types. If you don&#39;t specify a connector type, this operation describes all connectors vended by Amazon AppFlow. If there are more connectors than can be returned in one page, the response contains a &lt;code&gt;nextToken&lt;/code&gt; object, which can be be passed in to the next call to the &lt;code&gt;DescribeConnectors&lt;/code&gt; API operation to retrieve the next page. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConnectorsTest() throws ApiException {
        DescribeConnectorsRequest describeConnectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeConnectorsResponse response = api.describeConnectors(describeConnectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Provides a description of the specified flow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFlowTest() throws ApiException {
        DescribeFlowRequest describeFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFlowResponse response = api.describeFlow(describeFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Fetches the execution history of the flow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFlowExecutionRecordsTest() throws ApiException {
        DescribeFlowExecutionRecordsRequest describeFlowExecutionRecordsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeFlowExecutionRecordsResponse response = api.describeFlowExecutionRecords(describeFlowExecutionRecordsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns the list of available connector entities supported by Amazon AppFlow. For example, you can query Salesforce for &lt;i&gt;Account&lt;/i&gt; and &lt;i&gt;Opportunity&lt;/i&gt; entities, or query ServiceNow for the &lt;i&gt;Incident&lt;/i&gt; entity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConnectorEntitiesTest() throws ApiException {
        ListConnectorEntitiesRequest listConnectorEntitiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListConnectorEntitiesResponse response = api.listConnectorEntities(listConnectorEntitiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the list of all registered custom connectors in your Amazon Web Services account. This API lists only custom connectors registered in this account, not the Amazon Web Services authored connectors. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConnectorsTest() throws ApiException {
        ListConnectorsRequest listConnectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListConnectorsResponse response = api.listConnectors(listConnectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Lists all of the flows associated with your account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFlowsTest() throws ApiException {
        ListFlowsRequest listFlowsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFlowsResponse response = api.listFlows(listFlowsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Retrieves the tags that are associated with a specified flow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Registers a new custom connector with your Amazon Web Services account. Before you can register the connector, you must deploy the associated AWS lambda function in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerConnectorTest() throws ApiException {
        RegisterConnectorRequest registerConnectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterConnectorResponse response = api.registerConnector(registerConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Resets metadata about your connector entities that Amazon AppFlow stored in its cache. Use this action when you want Amazon AppFlow to return the latest information about the data that you have in a source application.&lt;/p&gt; &lt;p&gt;Amazon AppFlow returns metadata about your entities when you use the ListConnectorEntities or DescribeConnectorEntities actions. Following these actions, Amazon AppFlow caches the metadata to reduce the number of API requests that it must send to the source application. Amazon AppFlow automatically resets the cache once every hour, but you can use this action when you want to get the latest metadata right away.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetConnectorMetadataCacheTest() throws ApiException {
        ResetConnectorMetadataCacheRequest resetConnectorMetadataCacheRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.resetConnectorMetadataCache(resetConnectorMetadataCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Activates an existing flow. For on-demand flows, this operation runs the flow immediately. For schedule and event-triggered flows, this operation activates the flow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startFlowTest() throws ApiException {
        StartFlowRequest startFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartFlowResponse response = api.startFlow(startFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deactivates the existing flow. For on-demand flows, this operation returns an &lt;code&gt;unsupportedOperationException&lt;/code&gt; error message. For schedule and event-triggered flows, this operation deactivates the flow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopFlowTest() throws ApiException {
        DescribeFlowRequest describeFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopFlowResponse response = api.stopFlow(describeFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Applies a tag to the specified flow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Unregisters the custom connector registered in your account that matches the connector label provided in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unregisterConnectorTest() throws ApiException {
        UnregisterConnectorRequest unregisterConnectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.unregisterConnector(unregisterConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Removes a tag from the specified flow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates a given connector profile associated with your account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectorProfileTest() throws ApiException {
        UpdateConnectorProfileRequest updateConnectorProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateConnectorProfileResponse response = api.updateConnectorProfile(updateConnectorProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a custom connector that you&#39;ve previously registered. This operation updates the connector with one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The latest version of the AWS Lambda function that&#39;s assigned to the connector&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new AWS Lambda function that you specify&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectorRegistrationTest() throws ApiException {
        UpdateConnectorRegistrationRequest updateConnectorRegistrationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateConnectorRegistrationResponse response = api.updateConnectorRegistration(updateConnectorRegistrationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates an existing flow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFlowTest() throws ApiException {
        UpdateFlowRequest updateFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFlowResponse response = api.updateFlow(updateFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
